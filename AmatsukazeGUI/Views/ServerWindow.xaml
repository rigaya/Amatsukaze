<Window x:Class="Amatsukaze.Views.ServerWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:v="clr-namespace:Amatsukaze.Views"
        xmlns:vm="clr-namespace:Amatsukaze.ViewModels"
        xmlns:c="clr-namespace:Amatsukaze.Components" 
        Title="{Binding WindowCaption}" Height="450" Width="685.104" StateChanged="Window_StateChanged">
    
    <Window.DataContext>
        <vm:ServerViewModel/>
    </Window.DataContext>
    
    <i:Interaction.Behaviors>
        <l:WindowCloseCancelBehavior CanClose="{Binding CanCloseWindow}"
                                     CloseCanceledCallbackMethodTarget="{Binding}"
                                     CloseCanceledCallbackMethodName="CloseCanceledCallback" />
    </i:Interaction.Behaviors>
    
     <i:Interaction.Triggers>
     
     	<!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
    	<!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
    	<!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています --> 
        
        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <l:InteractionMessageTrigger MessageKey="Confirm" Messenger="{Binding Messenger}">
            <l:ConfirmationDialogInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False"/>
        </l:InteractionMessageTrigger>

        <l:InteractionMessageTrigger Messenger="{Binding Messenger}" MessageKey="FromMain">
            <l:TransitionInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False"/>
        </l:InteractionMessageTrigger>

        <l:InteractionMessageTrigger MessageKey="Message" Messenger="{Binding Messenger}">
            <l:InformationDialogInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False"/>
        </l:InteractionMessageTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->
        <l:InteractionMessageTrigger MessageKey="WindowAction" Messenger="{Binding Messenger}">
            <l:WindowInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False"/>
        </l:InteractionMessageTrigger>
         
    </i:Interaction.Triggers>
    
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="3*"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <ListBox x:Name="lst" ItemsSource="{Binding Log}">
            <ListBox.Template>
                <ControlTemplate>
                    <c:LogScrollViewer BindableVerticalOffset="{Binding ScrollOffset, Mode=TwoWay}"
                                       AutoScroll="{Binding AutoScroll, Mode=TwoWay}"
                                   HorizontalScrollBarVisibility="Disabled" CanContentScroll="True">
                        <ItemsPresenter/>
                    </c:LogScrollViewer>
                </ControlTemplate>
            </ListBox.Template>
            <ListBox.ItemsPanel>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel IsVirtualizing="True"/>
                </ItemsPanelTemplate>
            </ListBox.ItemsPanel>
            <ListBox.ContextMenu>
                <ContextMenu>
                    <MenuItem Header="選択項目をコピー" Click="MenuItem_Click" />
                    <MenuItem IsCheckable="True" IsChecked="{Binding AutoScroll, Mode=TwoWay}" Header="オートスクロール" />
                </ContextMenu>
            </ListBox.ContextMenu>
            <ListBox.ItemTemplate>
                <DataTemplate>
                    <TextBlock Text="{Binding}" TextWrapping="Wrap" />
                </DataTemplate>
            </ListBox.ItemTemplate>
        </ListBox>

        <GridSplitter Grid.Row="1" ResizeDirection="Rows" HorizontalAlignment="Stretch" Height="5" VerticalAlignment="Center" />

        <ListBox Grid.Row="2" ItemsSource="{Binding Server.ClientManager.ClientList}" HorizontalContentAlignment="Stretch">
            <ListBox.ItemTemplate>
                <DataTemplate DataType="s:Client">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <TextBlock Grid.Column="0">
                            <Run Text="{Binding HostName, Mode=OneWay}" />:<Run Text="{Binding Port, Mode=OneWay}" />
                        </TextBlock>
                        <TextBlock Grid.Column="1">
                            <Run Text="送信カウント" />
                            <Run Text="{Binding TotalSendCount}" />
                        </TextBlock>
                        <TextBlock Grid.Column="2">
                            <Run Text="受信カウント" />
                            <Run Text="{Binding TotalRecvCount}" />
                        </TextBlock>
                    </Grid>
                </DataTemplate>
            </ListBox.ItemTemplate>
        </ListBox>
        
        <Grid Grid.Row="3">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Grid.Style>
                <Style TargetType="Grid">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Server.NowEncoding}" Value="True">
                            <Setter Property="Background" Value="Violet" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Server.EncodePaused}" Value="True">
                            <Setter Property="Background" Value="Yellow" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Grid.Style>
            <TextBlock TextAlignment="Center">
                <TextBlock.Style>
                    <Style TargetType="TextBlock">
                        <Setter Property="Text" Value="停止" />
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Server.NowEncoding}" Value="True">
                                <Setter Property="Text" Value="エンコード中" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Server.EncodePaused}" Value="True">
                                <Setter Property="Text" Value="一時停止中" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </TextBlock.Style>
            </TextBlock>
            <TextBlock Text="キュー停止" Grid.Column="1" TextAlignment="Center">
                <TextBlock.Style>
                    <Style TargetType="TextBlock">
                        <Setter Property="Background" Value="Yellow"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Server.QueuePaused}" Value="False">
                                <Setter Property="Foreground" Value="Gray"/>
                                <Setter Property="Background" Value="Transparent"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </TextBlock.Style>
            </TextBlock>
        </Grid>
    </Grid>
</Window>
