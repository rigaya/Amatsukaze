<Window x:Class="Amatsukaze.Views.SelectOutPath"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:v="clr-namespace:Amatsukaze.Views"
        xmlns:vm="clr-namespace:Amatsukaze.ViewModels"
        xmlns:m="clr-namespace:Amatsukaze.Models" 
        xmlns:c="clr-namespace:Amatsukaze.Components" 
        mc:Ignorable="d" 
        d:DataContext="{d:DesignInstance {x:Type vm:SelectOutPathViewModel}}"
        Title="Amatsukaze プロファイル＆出力先選択" SizeToContent="Height" Width="400" Loaded="Window_Loaded">

    <Window.Resources>
        <ResourceDictionary Source="CommonResources.xaml"/>
    </Window.Resources>

    <i:Interaction.Triggers>

        <!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
        <!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
        <!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています -->

        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <l:InteractionMessageTrigger MessageKey="Confirm" Messenger="{Binding Messenger}">
            <l:ConfirmationDialogInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False"/>
        </l:InteractionMessageTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->
        <l:InteractionMessageTrigger MessageKey="Close" Messenger="{Binding Messenger}">
            <l:WindowInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False"/>
        </l:InteractionMessageTrigger>

    </i:Interaction.Triggers>

    <StackPanel Margin="5">
        <TextBlock Margin="2" Text="{Binding InputInfoText, Mode=OneWay}" TextWrapping="Wrap" />
        <StackPanel>
            <StackPanel.Resources>
                <DataTemplate DataType="{x:Type m:DisplayAutoSelect}">
                    <TextBlock>自動選択_<Run Text="{Binding Path=Model.Name}"/></TextBlock>
                </DataTemplate>
            </StackPanel.Resources>
            <Grid>
                <TextBlock HorizontalAlignment="Center" Margin="2">
                    <Run Text="（エンコード設定）" Foreground="White"/><Run FontSize="18" Text="プロファイル"/><Run Text="（エンコード設定）"/>
                </TextBlock>
            </Grid>
            <ComboBox SelectedItem="{Binding SelectedProfile, Mode=TwoWay}" Height="25"
                      ItemsSource="{Binding Model.SelectableProfiles}" />
            <Grid>
                <TextBlock Margin="2" Text="出力先フォルダ" HorizontalAlignment="Center" FontSize="18"/>
                <Canvas>
                    <DockPanel Canvas.Bottom="0" Canvas.Right="3">
                        <c:DropDownMenuButton Content="履歴" Margin="2" Style="{StaticResource ButtonStyle}">
                            <c:DropDownMenuButton.DropDownContextMenu>
                                <ContextMenu ItemsSource="{Binding OutPathHistory}">
                                    <ContextMenu.ItemContainerStyle>
                                        <Style TargetType="MenuItem">
                                            <Setter Property="Header" Value="{Binding Path=Path}"/>
                                            <Setter Property="Command" Value="{Binding Path=SelectedCommand}"/>
                                        </Style>
                                    </ContextMenu.ItemContainerStyle>
                                </ContextMenu>
                            </c:DropDownMenuButton.DropDownContextMenu>
                        </c:DropDownMenuButton>
                        <Button Content="デフォルト" Margin="2" Command="{Binding ResetOutPathCommand}"/>
                    </DockPanel>
                </Canvas>
            </Grid>
            <TextBox Margin="2" Height="23" TextWrapping="Wrap" 
                     Text="{Binding OutPath, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                     VerticalAlignment="Top" PreviewDragOver="textBox_PreviewDragOver" Drop="textBox_Drop"/>
            <DockPanel>
                <ComboBox Width="40" Height="22" HorizontalAlignment="Left" DockPanel.Dock="Right"
                                ItemsSource="{Binding Model.PriorityList}" 
                                SelectedItem="{Binding Item.Outputs[0].Priority, Mode=TwoWay}"/>
                <TextBlock Text="優先度:" VerticalAlignment="Center" DockPanel.Dock="Right"/>
                <CheckBox Content="キューを凍結して追加" IsChecked="{Binding PauseStart, Mode=TwoWay}"
                        VerticalAlignment="Center"/>
            </DockPanel>
            <DockPanel>
                <TextBlock Text="追加時バッチ" VerticalAlignment="Center" Margin="5,0"/>
                <ComboBox ItemsSource="{Binding Model.AddQueueBatFiles}" Height="22"
                          SelectedItem="{Binding AddQueueBat, Mode=TwoWay}"/>
            </DockPanel>
        </StackPanel>
        
        <TextBlock Margin="2" TextWrapping="Wrap" Text="{Binding Description}" Foreground="Red"/>
        
        <Button Margin="2" Height="Auto" Command="{Binding OkCommand, Mode=OneWay}">
            <TextBlock TextAlignment="Center" TextWrapping="Wrap">
                <Run FontSize="20" Text="通常モード"/><LineBreak/><Run Text="入力ファイルは、エンコード後 succeededフォルダ（成功時）、failedフォルダ（失敗時）に移動します。同名出力ファイルは上書きします。"/>
            </TextBlock>
        </Button>

        <Button Margin="2" Height="Auto" Command="{Binding TestCommand, Mode=OneWay}">
            <TextBlock TextAlignment="Center" TextWrapping="Wrap">
                <Run FontSize="20" Text="テストモード"/><LineBreak/><Run Text="エンコード後、入力ファイルは移動しません。"/><LineBreak/><Run Text="同名ファイルがある場合は上書きせず、別名で出力します。"/>
            </TextBlock>
        </Button>

        <Expander Header="他のモード">
            <StackPanel>
                <Button Margin="2" Height="Auto" Command="{Binding SearchCommand, Mode=OneWay}">
                    <TextBlock TextAlignment="Center" TextWrapping="Wrap">
                <Run FontSize="20" Text="DRCS外字チェック"/><LineBreak/><Run Text="入力ファイルを読んで未登録のDRCS外字を見つけます。エンコードはしません。DRCS外字登録をまとめて処理したいときに使ってください。"/>
                    </TextBlock>
                </Button>

                <Button Margin="2" Height="Auto" Command="{Binding CMCheckCommand, Mode=OneWay}">
                    <TextBlock TextAlignment="Center" TextWrapping="Wrap">
                <Run FontSize="20" Text="CM解析のみ"/><LineBreak/><Run Text="CM解析のみ行います。エンコードはしません。結果はログを確認してください。"/>
                    </TextBlock>
                </Button>
            </StackPanel>
        </Expander>
        
        <Button Margin="2" Height="50" >
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="Click">
                    <l:WindowInteractionMessageAction>
                        <l:DirectInteractionMessage>
                            <l:WindowActionMessage/>
                        </l:DirectInteractionMessage>
                    </l:WindowInteractionMessageAction>
                </i:EventTrigger>
            </i:Interaction.Triggers>
            <TextBlock TextAlignment="Center" TextWrapping="Wrap">
                <Run FontSize="20" Text="キャンセル"/>
            </TextBlock>
        </Button>
    </StackPanel>
</Window>
