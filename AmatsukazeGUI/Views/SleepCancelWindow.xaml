<Window x:Class="Amatsukaze.Views.SleepCancelWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
        xmlns:v="clr-namespace:Amatsukaze.Views"
        xmlns:vm="clr-namespace:Amatsukaze.ViewModels"
        mc:Ignorable="d" 
        Title="{Binding WindowTitle}" Width="350" Topmost="True"
        d:DataContext="{d:DesignInstance {x:Type vm:SleepCancelViewModel}}"
        SizeToContent="Height" Loaded="Window_Loaded" >

    <Window.Resources>
        <ResourceDictionary Source="CommonResources.xaml"/>
    </Window.Resources>

    <i:Interaction.Triggers>

        <!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
        <!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
        <!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています -->

        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->
        <l:InteractionMessageTrigger MessageKey="Close" Messenger="{Binding Messenger}">
            <l:WindowInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False"/>
        </l:InteractionMessageTrigger>

    </i:Interaction.Triggers>

    <StackPanel>
        <TextBlock Margin="5">
            <Run Text="{Binding RemainSeconds, Mode=OneWay}"/>秒後に<Run Text="{Binding Action, Mode=OneWay}"/>します。
        </TextBlock>
        <ProgressBar Margin="5" Height="30" Value="{Binding Elapsed}" Maximum="{Binding WaitSeconds}"/>
        <Button Margin="5" Height="40" Command="{Binding CancelCommand}">
            <TextBlock>
                <Run Text="{Binding Action, Mode=OneWay}"/>をキャンセルする
            </TextBlock>
        </Button>

    </StackPanel>
</Window>
