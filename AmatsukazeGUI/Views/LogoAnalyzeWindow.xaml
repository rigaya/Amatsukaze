<Window x:Class="Amatsukaze.Views.LogoAnalyzeWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:v="clr-namespace:Amatsukaze.Views"
        xmlns:vm="clr-namespace:Amatsukaze.ViewModels"
        Title="ロゴ解析" Height="600" Width="800">

    <Window.DataContext>
        <vm:LogoAnalyzeViewModel/>
    </Window.DataContext>
    
    <i:Interaction.Behaviors>
        <l:WindowCloseCancelBehavior CanClose="{Binding CanClose}"
                                     CloseCanceledCallbackMethodTarget="{Binding}"
                                     CloseCanceledCallbackMethodName="CloseCanceledCallback" />
    </i:Interaction.Behaviors>
    
    <i:Interaction.Triggers>

        <!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
        <!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
        <!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています -->

        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->
        <l:InteractionMessageTrigger MessageKey="ScanComplete" Messenger="{Binding Messenger}">
            <l:TransitionInteractionMessageAction WindowType="{x:Type v:LogoImageWindow}"
                Mode="Modal" InvokeActionOnlyWhenWindowIsActive="False" />
        </l:InteractionMessageTrigger>
        
        <l:InteractionMessageTrigger MessageKey="WindowAction" Messenger="{Binding Messenger}">
            <l:WindowInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False"/>
        </l:InteractionMessageTrigger>
        
    </i:Interaction.Triggers>

    <DockPanel>
        <DockPanel DockPanel.Dock="Top" Height="40" Margin="5,0">
            <DockPanel.Resources>
                <Style TargetType="{x:Type FrameworkElement}" x:Key="SettingCombo">
                    <Style.Triggers>
                        <Trigger Property="Validation.HasError" Value="True">
                            <Setter Property="ToolTip" 
                                    Value="{Binding Path=(Validation.Errors)[0].ErrorContent,
                                    RelativeSource={x:Static RelativeSource.Self}}" />
                        </Trigger>
                        <DataTrigger Binding="{Binding Model.NowScanning}" Value="True">
                            <Setter Property="IsEnabled" Value="False" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
                <Style TargetType="{x:Type FrameworkElement}" x:Key="Progress" >
                    <Setter Property="IsEnabled" Value="False"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Model.ShowProgress}" Value="True">
                            <Setter Property="IsEnabled" Value="True" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </DockPanel.Resources>

            <Button DockPanel.Dock="Left" x:Name="button" Content="ロゴスキャン開始" Margin="5" VerticalAlignment="Top" Height="30" HorizontalAlignment="Left" Width="106" Grid.RowSpan="2" Command="{Binding StartScanCommand}">
                <Button.Style>
                    <Style TargetType="Button">
                        <Setter Property="IsEnabled" Value="False"/>
                        <Style.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding Path=(Validation.HasError), ElementName=maxFramesCombo}" Value="False"/>
                                    <Condition Binding="{Binding Path=(Validation.HasError), ElementName=thresholdCombo}" Value="False"/>
                                    <Condition Binding="{Binding Path=Model.NowScanning}" Value="False"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="IsEnabled" Value="True"/>
                            </MultiDataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>
            <TextBlock DockPanel.Dock="Left" x:Name="label1" Text="最大取得フレーム数" Margin="5"
                   VerticalAlignment="Center" HorizontalAlignment="Left" Width="104" Grid.RowSpan="2"/>

            <ComboBox DockPanel.Dock="Left" x:Name="maxFramesCombo" Style="{StaticResource SettingCombo}"
                      VerticalAlignment="Center" HorizontalAlignment="Left" Width="78" Margin="5"
                      ItemsSource="{Binding MaxFramesList}" IsEditable="True"
                      Text="{Binding MaxFrames, Mode=TwoWay, StringFormat=\{0:N0\}, UpdateSourceTrigger=PropertyChanged}" Grid.RowSpan="2"/>

            <TextBlock DockPanel.Dock="Left" x:Name="label" Text="しきい値" Margin="5"
                   VerticalAlignment="Center" HorizontalAlignment="Left" Width="49" Grid.RowSpan="2"/>

            <ComboBox DockPanel.Dock="Left" x:Name="thresholdCombo" Style="{StaticResource SettingCombo}"
                      VerticalAlignment="Center" Margin="5"
                      ItemsSource="{Binding ThresholdList}" IsEditable="True"
                      Text="{Binding Threshold, Mode=TwoWay, StringFormat=\{0:N0\}, UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Left" Width="51" Grid.RowSpan="2"/>


            <TextBlock DockPanel.Dock="Right" x:Name="textBlock" Margin="5" TextAlignment="Center" HorizontalAlignment="Right" VerticalAlignment="Center">
                <Run Text="{Binding Model.LogoNumRead}" /><Run Text="/"/><Run Text="{Binding Model.LogoNumTotal}"><Run.Style>
                    <Style TargetType="{x:Type Run}">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Model.LogoNumTotal}" Value="-1">
                            <Setter Property="Text" Value="不明" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
                </Run.Style></Run><LineBreak/><Run Text="収集サンプル数: "/><Run Text="{Binding Model.LogoNumValid}" />
            </TextBlock>

            <ProgressBar Height="25" Margin="5" Value="{Binding Model.LogoProgress}" VerticalAlignment="Center"/>
        </DockPanel>
        
        <Slider DockPanel.Dock="Bottom" x:Name="slider" VerticalAlignment="Top" Grid.Row="2"
                LargeChange="0.1" SmallChange="0.01" Maximum="1" TickFrequency="0.1" 
                Value="{Binding Model.FilePosition, Mode=TwoWay}" Margin="6"/>
        
        <ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" Grid.Row="1">
            <Grid>
                <Image x:Name="image" MouseLeftButtonDown="image_MouseLeftButtonDown" MouseMove="image_MouseMove" MouseLeftButtonUp="image_MouseLeftButtonUp"
                       Source="{Binding Model.CurrentImage}" Stretch="None"/>
                <Canvas Width="{Binding ActualWidth, ElementName=image, Mode=OneWay}"
                        Height="{Binding ActualHeight, ElementName=image, Mode=OneWay}">
                    <Rectangle x:Name="rectangle"
                               Width="{Binding RectSize.Width}" Height="{Binding RectSize.Height}"
                               Stroke="#FF5F55FF" StrokeDashArray="1 2" StrokeDashCap="Triangle" StrokeThickness="2"
                               HorizontalAlignment="Left" VerticalAlignment="Top" 
                               Canvas.Left="{Binding RectPosition.X}" Canvas.Top="{Binding RectPosition.Y}"/>
                </Canvas>
                <TextBlock Text="読み込み中・・・しばらくお待ち下さい。" FontSize="36">
                    <TextBlock.Style>
                        <Style TargetType="{x:Type TextBlock}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Model.IsNoImage}" Value="False">
                                    <Setter Property="Visibility" Value="Collapsed" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>
            </Grid>
        </ScrollViewer>
    </DockPanel>
</Window>
