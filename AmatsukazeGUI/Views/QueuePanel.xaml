<UserControl x:Class="Amatsukaze.Views.QueuePanel"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:vm="clr-namespace:Amatsukaze.ViewModels" 
             xmlns:m="clr-namespace:Amatsukaze.Models" 
             xmlns:c="clr-namespace:Amatsukaze.Components" 
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="480"
             d:DataContext="{d:DesignInstance {x:Type vm:QueueViewModel}}"
             Loaded="UserControl_Loaded"
             Background="{DynamicResource AMT.ControlBackgroundBrush}">

    <UserControl.Resources>
        <ResourceDictionary Source="CommonResources.xaml"/>
    </UserControl.Resources>

    <i:Interaction.Triggers>
        <l:InteractionMessageTrigger Messenger="{Binding Messenger}" MessageKey="FromMain">
            <l:TransitionInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False"/>
        </l:InteractionMessageTrigger>

        <l:InteractionMessageTrigger MessageKey="Confirm" Messenger="{Binding Messenger}">
            <l:ConfirmationDialogInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False"/>
        </l:InteractionMessageTrigger>
    </i:Interaction.Triggers>

    <DockPanel>
        <DockPanel.Resources>
            <CollectionViewSource x:Key="ProfileList" Source="{Binding ProfileList}"/>
            <CollectionViewSource x:Key="AutoSelectList" Source="{Binding AutoSelectList}"/>
            <DataTemplate DataType="{x:Type m:DisplayAutoSelect}">
                <TextBlock>自動選択_<Run Text="{Binding Path=Model.Name}"/></TextBlock>
            </DataTemplate>
            <Style x:Key="ButtonForSelectedItems" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding ElementName=QueueList, Path=SelectedItems.Count}" Value="0">
                        <Setter Property="IsEnabled" Value="False"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
            <Style x:Key="MenuForSelectedItems" TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding ElementName=QueueList, Path=SelectedItems.Count}" Value="0">
                        <Setter Property="IsEnabled" Value="False"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border Padding="{TemplateBinding Padding}">
                                <Grid Background="Transparent" SnapsToDevicePixels="False">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="19"/>
                                        <RowDefinition Height="*"/>
                                    </Grid.RowDefinitions>
                                    <Grid>
                                        <Grid.LayoutTransform>
                                            <TransformGroup>
                                                <TransformGroup.Children>
                                                    <TransformCollection>
                                                        <RotateTransform Angle="-90"/>
                                                    </TransformCollection>
                                                </TransformGroup.Children>
                                            </TransformGroup>
                                        </Grid.LayoutTransform>
                                        <Ellipse x:Name="circle" HorizontalAlignment="Center" Height="19" Stroke="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" VerticalAlignment="Center" Width="19"/>
                                        <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" StrokeThickness="2" VerticalAlignment="Center"/>
                                    </Grid>
                                    <ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource {x:Static SystemColors.AccentColorBrushKey}}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource {x:Static SystemColors.AccentColorDark1BrushKey}}"/>
                                    <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource {x:Static SystemColors.AccentColorBrushKey}}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border Padding="{TemplateBinding Padding}">
                                <Grid Background="Transparent" SnapsToDevicePixels="False">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="19"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid>
                                        <Grid.LayoutTransform>
                                            <TransformGroup>
                                                <TransformGroup.Children>
                                                    <TransformCollection>
                                                        <RotateTransform Angle="180"/>
                                                    </TransformCollection>
                                                </TransformGroup.Children>
                                            </TransformGroup>
                                        </Grid.LayoutTransform>
                                        <Ellipse x:Name="circle" HorizontalAlignment="Center" Height="19" Stroke="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" VerticalAlignment="Center" Width="19"/>
                                        <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" StrokeThickness="2" VerticalAlignment="Center"/>
                                    </Grid>
                                    <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource {x:Static SystemColors.AccentColorBrushKey}}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource {x:Static SystemColors.AccentColorDark1BrushKey}}"/>
                                    <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource {x:Static SystemColors.AccentColorBrushKey}}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border Padding="{TemplateBinding Padding}">
                                <Grid Background="Transparent" SnapsToDevicePixels="False">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="19"/>
                                        <RowDefinition Height="*"/>
                                    </Grid.RowDefinitions>
                                    <Grid>
                                        <Grid.LayoutTransform>
                                            <TransformGroup>
                                                <TransformGroup.Children>
                                                    <TransformCollection>
                                                        <RotateTransform Angle="90"/>
                                                    </TransformCollection>
                                                </TransformGroup.Children>
                                            </TransformGroup>
                                        </Grid.LayoutTransform>
                                        <Ellipse x:Name="circle" HorizontalAlignment="Center" Height="19" Stroke="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" VerticalAlignment="Center" Width="19"/>
                                        <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" StrokeThickness="2" VerticalAlignment="Center"/>
                                    </Grid>
                                    <ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="#FF3C7FB1"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="#222"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="#FF526C7B"/>
                                    <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="#FF003366"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="ExpanderHeaderFocusVisual">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Border>
                                <Rectangle Margin="0" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border Padding="{TemplateBinding Padding}">
                                <Grid Background="Transparent" SnapsToDevicePixels="False">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="19"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Ellipse x:Name="circle" HorizontalAlignment="Center" Height="19" Stroke="DarkGray" VerticalAlignment="Center" Width="19"/>
                                    <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="#666" StrokeThickness="2" VerticalAlignment="Center"/>
                                    <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="#FF3C7FB1"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="#222"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="#FF526C7B"/>
                                    <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="#FF003366"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="ExpanderStyle1" TargetType="{x:Type Expander}">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Expander}">
                            <Border BorderBrush="{TemplateBinding BorderBrush}" 
                                    BorderThickness="{TemplateBinding BorderThickness}" 
                                    Background="{TemplateBinding Background}" 
                                    CornerRadius="3" SnapsToDevicePixels="true">
                                <DockPanel>
                                    <ToggleButton x:Name="HeaderSite"
                                                  Height="{TemplateBinding MinHeight}"
                                                  ContentTemplate="{TemplateBinding HeaderTemplate}" 
                                                  ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                                  Content="{TemplateBinding Header}" 
                                                  DockPanel.Dock="Top" 
                                                  Foreground="{TemplateBinding Foreground}" 
                                                  FontWeight="{TemplateBinding FontWeight}" 
                                                  FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" 
                                                  FontStyle="{TemplateBinding FontStyle}" 
                                                  FontStretch="{TemplateBinding FontStretch}" 
                                                  FontSize="{TemplateBinding FontSize}" 
                                                  FontFamily="{TemplateBinding FontFamily}" 
                                                  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                  IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                                  Margin="0" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" 
                                                  Style="{StaticResource ExpanderDownHeaderStyle}" 
                                                  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                    <ContentPresenter x:Name="ExpandSite" 
                                                      DockPanel.Dock="Bottom" 
                                                      Focusable="false" 
                                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                      Margin="{TemplateBinding Padding}"
                                                      Visibility="Collapsed" 
                                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                </DockPanel>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsExpanded" Value="true">
                                    <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                                </Trigger>
                                <Trigger Property="ExpandDirection" Value="Right">
                                    <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
                                    <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
                                    <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"/>
                                </Trigger>
                                <Trigger Property="ExpandDirection" Value="Up">
                                    <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
                                    <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
                                    <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"/>
                                </Trigger>
                                <Trigger Property="ExpandDirection" Value="Left">
                                    <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
                                    <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
                                    <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

        </DockPanel.Resources>
        <Expander DockPanel.Dock="Top" IsExpanded="{Binding IsFilterPanelOpen, Mode=TwoWay}" Style="{StaticResource ExpanderStyle1}" MinHeight="22">
            <Expander.Header>
                <!-- HeaderのコンテナのHorizontalAlignmentをOneWayToSourceを使ってStretchに書き換えるテク -->
                <DockPanel HorizontalAlignment="{Binding HorizontalAlignment, RelativeSource={RelativeSource AncestorType=ContentPresenter}, Mode=OneWayToSource}">
                    <TextBlock Text="フィルタ" VerticalAlignment="Center"/>
                    <Button Margin="10,0" Content="↻" Width="18" Command="{Binding ApplyFilterCommand}" 
                            IsTabStop="False" Focusable="False" ToolTip="更新"/>
                    <DockPanel>
                        <TextBlock Text="検索" VerticalAlignment="Center"/>
                        <Button DockPanel.Dock="Right" Content="☓" Width="18" Command="{Binding ClearSearchWordCommand}" 
                            IsTabStop="False" Focusable="False" ToolTip="フィルタをクリア"/>
                        <TextBox Margin="3,0" FontSize="14" Text="{Binding SearchWord, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                 Background="{DynamicResource AMT.ControlBackgroundBrush}"
                                 Foreground="{DynamicResource AMT.ControlForegroundBrush}"/>
                    </DockPanel>
                </DockPanel>
            </Expander.Header>
            <DockPanel>
                <GroupBox DockPanel.Dock="Top" Header="検索項目">
                    <WrapPanel>
                        <CheckBox Margin="0,0" FontSize="11" Content="ファイル名" IsChecked="{Binding SearchChecks[0].Value, Mode=TwoWay}"/>
                        <CheckBox Margin="0,0" FontSize="11" Content="チャンネル" IsChecked="{Binding SearchChecks[1].Value, Mode=TwoWay}"/>
                        <CheckBox Margin="0,0" FontSize="11" Content="プロファイル" IsChecked="{Binding SearchChecks[2].Value, Mode=TwoWay}"/>
                        <CheckBox Margin="0,0" FontSize="11" Content="ジャンル" IsChecked="{Binding SearchChecks[3].Value, Mode=TwoWay}"/>
                        <CheckBox Margin="0,0" FontSize="11" Content="状態" IsChecked="{Binding SearchChecks[4].Value, Mode=TwoWay}"/>
                        <CheckBox Margin="0,0" FontSize="11" Content="モード" IsChecked="{Binding SearchChecks[5].Value, Mode=TwoWay}"/>
                        <CheckBox Margin="0,0" FontSize="11" Content="すべて" IsChecked="{Binding SearchCheckAll, Mode=TwoWay}"/>
                    </WrapPanel>
                </GroupBox>
                <GroupBox DockPanel.Dock="Top" Header="状態">
                    <WrapPanel>
                        <CheckBox Margin="0,0" FontSize="11" Content="待ち" IsChecked="{Binding StateChecks[0].Value, Mode=TwoWay}"/>
                        <CheckBox Margin="0,0" FontSize="11" Content="ペンディング" IsChecked="{Binding StateChecks[1].Value, Mode=TwoWay}"/>
                        <CheckBox Margin="0,0" FontSize="11" Content="実行中" IsChecked="{Binding StateChecks[2].Value, Mode=TwoWay}"/>
                        <CheckBox Margin="0,0" FontSize="11" Content="キャンセル" IsChecked="{Binding StateChecks[3].Value, Mode=TwoWay}"/>
                        <CheckBox Margin="0,0" FontSize="11" Content="完了" IsChecked="{Binding StateChecks[4].Value, Mode=TwoWay}"/>
                        <CheckBox Margin="0,0" FontSize="11" Content="失敗" IsChecked="{Binding StateChecks[5].Value, Mode=TwoWay}"/>
                        <CheckBox Margin="0,0" FontSize="11" Content="すべて" IsChecked="{Binding StateCheckAll, Mode=TwoWay}"/>
                    </WrapPanel>
                </GroupBox>
                <GroupBox DockPanel.Dock="Top" Header="優先度">
                    <WrapPanel>
                        <CheckBox Margin="0,0" FontSize="11" Padding="6,0" Content="1" IsChecked="{Binding PriorityChecks[0].Value, Mode=TwoWay}"/>
                        <CheckBox Margin="0,0" FontSize="11" Padding="6,0" Content="2" IsChecked="{Binding PriorityChecks[1].Value, Mode=TwoWay}"/>
                        <CheckBox Margin="0,0" FontSize="11" Padding="6,0" Content="3" IsChecked="{Binding PriorityChecks[2].Value, Mode=TwoWay}"/>
                        <CheckBox Margin="0,0" FontSize="11" Padding="6,0" Content="4" IsChecked="{Binding PriorityChecks[3].Value, Mode=TwoWay}"/>
                        <CheckBox Margin="0,0" FontSize="11" Padding="6,0" Content="5" IsChecked="{Binding PriorityChecks[4].Value, Mode=TwoWay}"/>
                        <CheckBox Margin="0,0" FontSize="11" Padding="6,0" Content="すべて" IsChecked="{Binding PriorityCheckAll, Mode=TwoWay}"/>
                    </WrapPanel>
                </GroupBox>
                <WrapPanel HorizontalAlignment="Left" Margin="6,0">
                    <CheckBox Content="エンコード日時が" VerticalAlignment="Center" IsChecked="{Binding EnableFilterDate, Mode=TwoWay}"/>
                    <DatePicker IsEnabled="{Binding EnableFilterDate}" SelectedDate="{Binding FilterDateStart, Mode=TwoWay}" />
                    <TextBlock Text="から" VerticalAlignment="Center" />
                    <DatePicker IsEnabled="{Binding EnableFilterDate}" SelectedDate="{Binding FilterDateEnd, Mode=TwoWay}" />
                    <TextBlock Text="まで" VerticalAlignment="Center"/>
                </WrapPanel>
            </DockPanel>
        </Expander>
        <Expander DockPanel.Dock="Top" IsExpanded="{Binding IsControlPanelOpen, Mode=TwoWay}" Style="{StaticResource ExpanderStyle1}" MinHeight="22">
            <Expander.Header>
                <Grid HorizontalAlignment="{Binding HorizontalAlignment, RelativeSource={RelativeSource AncestorType=ContentPresenter}, Mode=OneWayToSource}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition MinWidth="60"/>
                        <ColumnDefinition MinWidth="70" MaxWidth="200"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock VerticalAlignment="Center">操作パネル</TextBlock>
                    <DockPanel Grid.Column="1">
                        <TextBlock VerticalAlignment="Center">表示</TextBlock>
                        <Slider Margin="3,0" Height="26" Maximum="2" Value="{Binding Model.Setting.ListStyle, Mode=TwoWay}"
                            VerticalAlignment="Center" HorizontalAlignment="Stretch" ToolTip="表示切り替え"/>
                    </DockPanel>
                </Grid>
            </Expander.Header>
            <DockPanel>
                <UniformGrid Columns="4" DockPanel.Dock="Top">
                    <Button Margin="3" Height="24" Content="キャンセル"
                            Style="{StaticResource ButtonForSelectedItems}"
                            Command="{Binding CancelCommand}"
                            CommandParameter="{Binding SelectedItems, ElementName=QueueList}"/>
                    <Button Margin="3" Height="24" Content="{Binding RemoveButtonHeader, Mode=OneWay}"
                            ToolTip="Shiftを押しながらクリックでTSファイルも同時に削除"
                            Command="{Binding RemoveCommand}"
                            CommandParameter="{Binding SelectedItems, ElementName=QueueList}"
                            Style="{StaticResource ButtonForSelectedItems}"/>
                    <Button Margin="3" Height="24" Content="リトライ"
                            Style="{StaticResource ButtonForSelectedItems}"
                            Command="{Binding RetryCommand}"
                            CommandParameter="{Binding SelectedItems, ElementName=QueueList}"
                            ToolTip="アイテムを追加直後の状態に戻します。"/>
                    <c:DropDownMenuButton Margin="3" Height="24" Content="プロファイル変更">
                        <c:DropDownMenuButton.Style>
                            <Style BasedOn="{StaticResource ButtonStyle}" TargetType="c:DropDownMenuButton">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=QueueList, Path=SelectedItems.Count}" Value="0">
                                        <Setter Property="IsEnabled" Value="False"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </c:DropDownMenuButton.Style>
                        <c:DropDownMenuButton.DropDownContextMenu>
                            <ContextMenu x:Name="buttonProfileMenu" ItemsSource="{Binding SelectableProfile}">
                                <ContextMenu.ItemContainerStyle>
                                    <Style TargetType="MenuItem">
                                        <Setter Property="Header" Value="{Binding Path=Item}"/>
                                        <Setter Property="Command" Value="{Binding Path=SelectedCommand}"/>
                                        <Setter Property="CommandParameter" Value="{Binding SelectedItems, ElementName=QueueList}"/>
                                    </Style>
                                </ContextMenu.ItemContainerStyle>
                            </ContextMenu>
                        </c:DropDownMenuButton.DropDownContextMenu>
                    </c:DropDownMenuButton>
                    <Button Margin="3" Height="24" Content="複製"
                            Style="{StaticResource ButtonForSelectedItems}"
                            Command="{Binding ReAddCommand}"
                            CommandParameter="{Binding SelectedItems, ElementName=QueueList}"
                            ToolTip="アイテムを同じ設定で複製します"/>
                    <Button Margin="3" Height="24" Content="プロファイル再適用"
                            Style="{StaticResource ButtonForSelectedItems}"
                            Command="{Binding RetryUpdateCommand}"
                            CommandParameter="{Binding SelectedItems, ElementName=QueueList}"
                            ToolTip="プロファイルが更新されていた場合、新しい設定を適用します"/>
                    <Button Margin="3" Height="24" Content="{Binding RemoveCompletedHeader, Mode=OneWay}"
                            Command="{Binding RemoveCompletedAllCommand}"
                            CommandParameter="{Binding SelectedItems, ElementName=QueueList}"
                            ToolTip="Shiftを押しながらクリックでTSファイルも同時に削除"/>
                    <Button Margin="3" Height="24" Content="追加処理をキャンセル"
                            Command="{Binding CancelAddQueueCommand}"
                            ToolTip="キュー追加処理をキャンセルします"/>
                </UniformGrid>
            </DockPanel>
        </Expander>

        <!--<Button DockPanel.Dock="Bottom" Command="{Binding TogglePauseCommand, Mode=OneWay}" Name="FreezeButton"
                ToolTip="凍結状態では新しいエンコードは始まりません。&#xa;キュー操作時に意図しないエンコード開始を防ぐには、キューを凍結してください。">
            <Button.Style>
                <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                    <Setter Property="Content" Value="キューを凍結"/>
                    <Setter Property="Foreground" Value="#FFA4A4A4"/>
                    <Setter Property="Background" Value="White"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Model.IsPaused}" Value="True">
                            <Setter Property="Content" Value="キューを凍結中です　エンコードは始まりません"/>
                            <Setter Property="Foreground" Value="Black"/>
                            <Setter Property="Background" Value="Yellow"/>
                            <Setter Property="FontWeight" Value="Bold"/>
                            <DataTrigger.EnterActions>
                                <BeginStoryboard Name="Blinking">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames
                                            Storyboard.TargetProperty="(Foreground).(SolidColorBrush.Color)"
                                            Duration="0:0:1.2" RepeatBehavior="Forever">
                                            <DiscreteColorKeyFrame Value="Black" KeyTime="0:0:0" />
                                            <DiscreteColorKeyFrame Value="Yellow" KeyTime="0:0:0.8" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <RemoveStoryboard BeginStoryboardName="Blinking"/>
                            </DataTrigger.ExitActions>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Button.Style>
        </Button>-->

        <DockPanel DockPanel.Dock="Bottom" Margin="6,0">
            <DockPanel DockPanel.Dock="Right">
                <TextBlock Height="16" Text="エンコード後"/>
                <ComboBox IsReadOnly="True" Width="135" Height="22"
                    ItemsSource="{Binding Model.FinishActionList}"
                    SelectedIndex="{Binding Model.FinishSetting.Action, Mode=TwoWay}"/>
            </DockPanel>
            <Separator DockPanel.Dock="Right" Style="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}"/>
            <Grid>
                <Grid.Resources>
                    <Style x:Key="ScheduledStopStyle" TargetType="{x:Type FrameworkElement}">
                        <Setter Property="Visibility" Value="Hidden"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Model.IsScheduledPaused}" Value="True">
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Grid.Resources>
                <DockPanel HorizontalAlignment="Stretch">
                    <TextBlock DockPanel.Dock="Left" Text="停止" VerticalAlignment="Center"/>
                    <TextBlock DockPanel.Dock="Right" Text="稼働" VerticalAlignment="Center"/>
                    <Button DockPanel.Dock="Top" Height="20" Margin="6,0" Command="{Binding TogglePauseCommand, Mode=OneWay}"
                        ToolTip="新しいエンコードが始まらないようにキューを止めます。&#xa;キュー操作時に意図しないエンコード開始を防ぐには、キューを停止してください。">
                        <Button.Style>
                            <Style TargetType="Button">
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate>
                                            <Grid>
                                                <Border CornerRadius="10" Background="DodgerBlue" BorderThickness="2"/>
                                                <Ellipse Width="20" Fill="White" Stroke="Black" HorizontalAlignment="Right"/>
                                                <TextBlock Text="キュー稼働中" TextAlignment="Center" VerticalAlignment="Center" FontWeight="Bold" Foreground="White"/>
                                            </Grid>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Model.IsPaused}" Value="True">
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate>
                                                    <Grid>
                                                        <Border CornerRadius="10" Background="LightGray" BorderThickness="2"/>
                                                        <Ellipse Width="20" Fill="White" Stroke="Black" HorizontalAlignment="Left"/>
                                                        <TextBlock Text="キュー停止中" TextAlignment="Center" VerticalAlignment="Center" FontWeight="Bold">
                                                            <TextBlock.Style>
                                                                <Style TargetType="TextBlock">
                                                                    <Setter Property="Foreground" Value="Black"/>
                                                                    <Style.Triggers>
                                                                        <DataTrigger Binding="{Binding Model.IsPaused}" Value="True">
                                                                            <DataTrigger.EnterActions>
                                                                                <BeginStoryboard Name="Blinking">
                                                                                    <Storyboard>
                                                                                        <ColorAnimationUsingKeyFrames
                                                                                        Storyboard.TargetProperty="(Foreground).(SolidColorBrush.Color)"
                                                                                        Duration="0:0:1.2" RepeatBehavior="Forever">
                                                                                            <DiscreteColorKeyFrame Value="Black" KeyTime="0:0:0" />
                                                                                            <DiscreteColorKeyFrame Value="LightGray" KeyTime="0:0:0.8" />
                                                                                        </ColorAnimationUsingKeyFrames>
                                                                                    </Storyboard>
                                                                                </BeginStoryboard>
                                                                            </DataTrigger.EnterActions>
                                                                            <DataTrigger.ExitActions>
                                                                                <RemoveStoryboard BeginStoryboardName="Blinking"/>
                                                                            </DataTrigger.ExitActions>
                                                                        </DataTrigger>
                                                                    </Style.Triggers>
                                                                </Style>
                                                            </TextBlock.Style>
                                                        </TextBlock>
                                                    </Grid>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    <Button DockPanel.Dock="Left" Height="20" Margin="6,0" Command="{Binding ToggleSuspendCommand, Mode=OneWay}"
                        ToolTip="実行中のエンコードプロセスを一時停止します">
                        <Button.Style>
                            <Style TargetType="Button">
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate>
                                            <Grid>
                                                <Border CornerRadius="10" Background="DodgerBlue" BorderThickness="2"/>
                                                <Ellipse Width="20" Fill="White" Stroke="Black" HorizontalAlignment="Right"/>
                                                <TextBlock Text="エンコードOK" TextAlignment="Center" VerticalAlignment="Center" FontWeight="Bold" Foreground="White"/>
                                            </Grid>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Model.IsSuspended}" Value="True">
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate>
                                                    <Grid>
                                                        <Border CornerRadius="10" Background="LightGray" BorderThickness="2"/>
                                                        <Ellipse Width="20" Fill="White" Stroke="Black" HorizontalAlignment="Left"/>
                                                        <TextBlock Text="エンコード一時停止中" TextAlignment="Center" VerticalAlignment="Center" FontWeight="Bold">
                                                            <TextBlock.Style>
                                                                <Style TargetType="TextBlock">
                                                                    <Setter Property="Foreground" Value="Black"/>
                                                                    <Style.Triggers>
                                                                        <DataTrigger Binding="{Binding Model.IsSuspended}" Value="True">
                                                                            <DataTrigger.EnterActions>
                                                                                <BeginStoryboard Name="Blinking">
                                                                                    <Storyboard>
                                                                                        <ColorAnimationUsingKeyFrames
                                                                                        Storyboard.TargetProperty="(Foreground).(SolidColorBrush.Color)"
                                                                                        Duration="0:0:1.2" RepeatBehavior="Forever">
                                                                                            <DiscreteColorKeyFrame Value="Black" KeyTime="0:0:0" />
                                                                                            <DiscreteColorKeyFrame Value="LightGray" KeyTime="0:0:0.8" />
                                                                                        </ColorAnimationUsingKeyFrames>
                                                                                    </Storyboard>
                                                                                </BeginStoryboard>
                                                                            </DataTrigger.EnterActions>
                                                                            <DataTrigger.ExitActions>
                                                                                <RemoveStoryboard BeginStoryboardName="Blinking"/>
                                                                            </DataTrigger.ExitActions>
                                                                        </DataTrigger>
                                                                    </Style.Triggers>
                                                                </Style>
                                                            </TextBlock.Style>
                                                        </TextBlock>
                                                    </Grid>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                </DockPanel>
                <Border Style="{StaticResource ScheduledStopStyle}" Background="{DynamicResource AMT.ControlBackgroundBrush}" Opacity="0.85" IsHitTestVisible="False"/>
                <TextBlock Style="{StaticResource ScheduledStopStyle}" VerticalAlignment="Center" TextAlignment="Center" FontWeight="Bold" Text="稼働時間設定により停止中です" IsHitTestVisible="False"/>
            </Grid>
        </DockPanel>

        <Grid>
            <Grid.Resources>
                <DataTemplate x:Key="ShowState" DataType="{x:Type m:DisplayQueueItem}">
                    <DockPanel>
                        <TextBlock>
                            状態: <Run Text="{Binding StateString, Mode=OneWay}" />
                            <Run ToolTip="{Binding Model.FailReason, Mode=OneWay}" Text="{Binding Model.FailReason, Mode=OneWay}" />
                        </TextBlock>
                        <TextBlock>
                            <TextBlock.Style>
                                <Style TargetType="TextBlock">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Model.EncodeStart, Mode=OneWay}">
                                            <DataTrigger.Value>
                                                <sys:DateTime/>
                                            </DataTrigger.Value>
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding IsEncoding, Mode=OneWay}" Value="False">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                            <TextBlock.ToolTip>
                                <TextBlock>
                                    経過時間: <Run>
                                        <Run.Text>
                                            <MultiBinding StringFormat="{}{0}時間{1:00;00}分{2:00;00}秒">
                                                <Binding Path="Elapsed.Hours" Mode="OneWay"/>
                                                <Binding Path="Elapsed.Minutes" Mode="OneWay"/>
                                                <Binding Path="Elapsed.Seconds" Mode="OneWay"/>
                                            </MultiBinding>
                                        </Run.Text>
                                    </Run>
                                </TextBlock>
                            </TextBlock.ToolTip>
                            (開始: <Run Text="{Binding Model.EncodeStart, Mode=OneWay, StringFormat=yyyy/MM/dd HH:mm:ss}"/>)
                        </TextBlock>
                        <TextBlock>
                            <TextBlock.Style>
                                <Style TargetType="TextBlock">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Model.EncodeFinish, Mode=OneWay}">
                                            <DataTrigger.Value>
                                                <sys:DateTime/>
                                            </DataTrigger.Value>
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                            (<Run>
                                <Run.ToolTip>
                                    <TextBlock>
                                        <TextBlock.Text>
                                            <MultiBinding StringFormat="{}経過時間: {0}時間{1:00;00}分{2:00;00}秒">
                                                <Binding Path="Model.EncodeTime.Hours" Mode="OneWay"/>
                                                <Binding Path="Model.EncodeTime.Minutes" Mode="OneWay"/>
                                                <Binding Path="Model.EncodeTime.Seconds" Mode="OneWay"/>
                                            </MultiBinding>
                                        </TextBlock.Text>
                                    </TextBlock>
                                </Run.ToolTip>
                                <Run.Text>
                                    <MultiBinding StringFormat="{}{0}時間{1:00;00}分{2:00;00}秒">
                                        <Binding Path="Model.EncodeTime.Hours" Mode="OneWay"/>
                                        <Binding Path="Model.EncodeTime.Minutes" Mode="OneWay"/>
                                        <Binding Path="Model.EncodeTime.Seconds" Mode="OneWay"/>
                                    </MultiBinding>
                                </Run.Text>
                            </Run>@<Run Text="{Binding Model.EncodeFinish, Mode=OneWay, StringFormat=yyyy/MM/dd HH:mm:ss}">
                                <Run.ToolTip>
                                    <TextBlock>
                                        <Run Text="{Binding StateString, Mode=OneWay}"/>時刻:
                                        <Run Text="{Binding Model.EncodeFinish, Mode=OneWay, StringFormat=yyyy/MM/dd HH:mm:ss}"/>
                                    </TextBlock>
                                </Run.ToolTip>
                            </Run>)
                        </TextBlock>
                    </DockPanel>
                </DataTemplate>
                <DataTemplate x:Key="DetailedItemTemplate" DataType="{x:Type m:DisplayQueueItem}">
                    <DockPanel>
                        <DockPanel.InputBindings>
                            <MouseBinding MouseAction="LeftDoubleClick"
                                  Command="{Binding DataContext.ShowItemDetailCommand, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"
                                  CommandParameter="{Binding}" />
                        </DockPanel.InputBindings>
                        <DockPanel Width="180" ToolTip="{Binding ServiceString, Mode=OneWay}" Margin="0,0,5,0">
                            <TextBlock>
                                <TextBlock.ToolTip>
                                    <TextBlock>
                                        タスク: <Run Text="{Binding ModeString, Mode=OneWay}"/>
                                        <LineBreak/>放送日時: <Run Text="{Binding TsTimeString, Mode=OneWay}"/>
                                        <LineBreak/>チャンネル: <Run Text="{Binding ServiceString, Mode=OneWay}"/>
                                        <LineBreak/>プロファイル: <Run Text="{Binding Model.Profile.Name}"/><Run Text="{Binding ProfileLastUpdate, Mode=OneWay}"/>
                                    </TextBlock>
                                </TextBlock.ToolTip>
                                タスク: <Run Text="{Binding ModeString, Mode=OneWay}"/>
                                <LineBreak/><Run Text="{Binding TsTimeString, Mode=OneWay}"/>@<Run Text="{Binding ServiceString, Mode=OneWay}"/>
                                <LineBreak/><Run Text="{Binding Model.Profile.Name}"/><Run Text="{Binding ProfileLastUpdate, Mode=OneWay}"/>
                            </TextBlock>
                        </DockPanel>
                        <Separator Style="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}"/>
                        <ComboBox Height="20" ToolTip="優先度" DockPanel.Dock="Right"
                                ItemsSource="{Binding DataContext.Model.PriorityList, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"
                                SelectedItem="{Binding Priority, Mode=TwoWay}"/>
                        <TextBlock DockPanel.Dock="Top" Margin="0,0,5,0">
                                <Run Text="{Binding Model.DirName, Mode=OneWay}"/>
                                <LineBreak/><Run Text="{Binding Model.FileName, Mode=OneWay}"/>
                                <TextBlock.ToolTip>
                                    <TextBlock>
                                        <Run Text="{Binding Model.FileName, Mode=OneWay}"/>
                                        <LineBreak/>ジャンル: <Run Text="{Binding GenreString, Mode=OneWay}"/>
                                        <LineBreak/>映像サイズ: <Run Text="{Binding VideoSizeString, Mode=OneWay}"/>
                                        <LineBreak/>タグ: <Run Text="{Binding TagString, Mode=OneWay}"/>
                                        <LineBreak/>出力先: <Run Text="{Binding OutDir, Mode=OneWay}"/>
                                    </TextBlock>
                                </TextBlock.ToolTip>
                            </TextBlock>
                        <ContentControl Margin="0,0,5,0" Content="{Binding}" ContentTemplate="{StaticResource ShowState}"/>
                    </DockPanel>
                </DataTemplate>
                <DataTemplate x:Key="NormatlItemTemplate" DataType="{x:Type m:DisplayQueueItem}">
                    <DockPanel>
                        <DockPanel.InputBindings>
                            <MouseBinding MouseAction="LeftDoubleClick"
                                  Command="{Binding DataContext.ShowItemDetailCommand, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"
                                  CommandParameter="{Binding}" />
                        </DockPanel.InputBindings>
                        <DockPanel Width="120" ToolTip="{Binding ServiceString, Mode=OneWay}" Margin="0,0,5,0">
                            <TextBlock DockPanel.Dock="Top">
                                <TextBlock.ToolTip>
                                    <TextBlock>
                                            タスク: <Run Text="{Binding ModeString, Mode=OneWay}"/>
                                            <LineBreak/>放送日時: <Run Text="{Binding TsTimeString, Mode=OneWay}"/>
                                            <LineBreak/>チャンネル: <Run Text="{Binding ServiceString, Mode=OneWay}"/>
                                            <LineBreak/>プロファイル: <Run Text="{Binding Model.Profile.Name}"/><Run Text="{Binding ProfileLastUpdate, Mode=OneWay}"/>
                                    </TextBlock>
                                </TextBlock.ToolTip>
                                    タスク: <Run Text="{Binding ModeString, Mode=OneWay}"/>
                                    <LineBreak/><Run Text="{Binding Model.Profile.Name}"/>
                                </TextBlock>
                        </DockPanel>
                        <Separator Style="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}"/>
                        <ComboBox Height="20" ToolTip="優先度" DockPanel.Dock="Right"
                                ItemsSource="{Binding DataContext.Model.PriorityList, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"
                                SelectedItem="{Binding Priority, Mode=TwoWay}"/>
                        <TextBlock DockPanel.Dock="Top" Margin="0,0,5,0">
                                <Run Text="{Binding Model.FileName, Mode=OneWay}"/>
                                <TextBlock.ToolTip>
                                    <TextBlock>
                                        <Run Text="{Binding Model.DirName, Mode=OneWay}"/>
                                        <LineBreak/><Run Text="{Binding Model.FileName, Mode=OneWay}"/>
                                        <LineBreak/>ジャンル: <Run Text="{Binding GenreString, Mode=OneWay}"/>
                                        <LineBreak/>映像サイズ: <Run Text="{Binding VideoSizeString, Mode=OneWay}"/>
                                        <LineBreak/>タグ: <Run Text="{Binding TagString, Mode=OneWay}"/>
                                        <LineBreak/>出力先: <Run Text="{Binding OutDir, Mode=OneWay}"/>
                                    </TextBlock>
                                </TextBlock.ToolTip>
                            </TextBlock>
                        <ContentControl Margin="0,0,5,0" Content="{Binding}" ContentTemplate="{StaticResource ShowState}"/>
                    </DockPanel>
                </DataTemplate>
                <DataTemplate x:Key="ShortItemTemplate" DataType="{x:Type m:DisplayQueueItem}">
                    <DockPanel>
                        <DockPanel.InputBindings>
                            <MouseBinding MouseAction="LeftDoubleClick"
                                  Command="{Binding DataContext.ShowItemDetailCommand, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"
                                  CommandParameter="{Binding}" />
                        </DockPanel.InputBindings>
                        <DockPanel Width="100" Margin="0,0,5,0">
                            <TextBlock DockPanel.Dock="Top">
                                <TextBlock.ToolTip>
                                    <TextBlock>
                                        タスク: <Run Text="{Binding ModeString, Mode=OneWay}"/>
                                        <LineBreak/>放送日時: <Run Text="{Binding TsTimeString, Mode=OneWay}"/>
                                        <LineBreak/>チャンネル: <Run Text="{Binding ServiceString, Mode=OneWay}"/>
                                        <LineBreak/>プロファイル: <Run Text="{Binding Model.Profile.Name}"/><Run Text="{Binding ProfileLastUpdate, Mode=OneWay}"/>
                                    </TextBlock>
                                </TextBlock.ToolTip>
                                <Run Text="{Binding ModeString, Mode=OneWay}"/> <Run Text="{Binding StateString, Mode=OneWay}" />
                             </TextBlock>
                        </DockPanel>
                        <Separator Style="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}"/>
                        <ComboBox Height="20" ToolTip="優先度" DockPanel.Dock="Right"
                                ItemsSource="{Binding DataContext.Model.PriorityList, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"
                                SelectedItem="{Binding Priority, Mode=TwoWay}"/>
                        <TextBlock DockPanel.Dock="Top" Margin="0,0,5,0">
                                <Run Text="{Binding Model.FileName, Mode=OneWay}"/>
                            <TextBlock.ToolTip>
                                <DockPanel>
                                    <TextBlock DockPanel.Dock="Top">
                                        <Run Text="{Binding Model.DirName, Mode=OneWay}"/>
                                        <LineBreak/><Run Text="{Binding Model.FileName, Mode=OneWay}"/>
                                        <LineBreak/>ジャンル: <Run Text="{Binding GenreString, Mode=OneWay}"/>
                                        <LineBreak/>映像サイズ: <Run Text="{Binding VideoSizeString, Mode=OneWay}"/>
                                        <LineBreak/>タグ: <Run Text="{Binding TagString, Mode=OneWay}"/>
                                        <LineBreak/>出力先: <Run Text="{Binding OutDir, Mode=OneWay}"/>
                                    </TextBlock>
                                    <ContentControl Content="{Binding}" ContentTemplate="{StaticResource ShowState}"/>
                                </DockPanel>
                            </TextBlock.ToolTip>
                            </TextBlock>
                    </DockPanel>
                </DataTemplate>
            </Grid.Resources>
            <ListBox x:Name="QueueList"
                ItemsSource="{Binding Model.QueueItems}"
                SelectedItem="{Binding Model.SelectedQueueItem, Mode=TwoWay}"
                PreviewDragOver="ListBox_PreviewDragOver" 
                Drop="ListBox_Drop" AllowDrop="True" 
                ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                SelectionMode="Extended"
                Loaded="QueueList_Loaded"
                Unloaded="QueueList_Unloaded"
                ScrollViewer.ScrollChanged="QueueList_ScrollChanged"
                Background="{DynamicResource AMT.ControlBackgroundBrush}"
                Foreground="{DynamicResource AMT.ControlForegroundBrush}">
                <i:Interaction.Behaviors>
                    <c:DragBehavior OnlyEvent="True" OnDropAt="{Binding DropAtCommand}" />
                </i:Interaction.Behaviors>
                <ListBox.InputBindings>
                    <KeyBinding Key="Delete" Command="{Binding RemoveCommand}"
                                CommandParameter="{Binding SelectedItems, ElementName=QueueList}"/>
                    <KeyBinding Key="Delete" Modifiers="Shift" Command="{Binding ShiftRemoveCommand}"
                                CommandParameter="{Binding SelectedItems, ElementName=QueueList}"/>
                    
                    <KeyBinding Key="Add" Command="{Binding MoveDownCommand}"
                                CommandParameter="{Binding SelectedItems, ElementName=QueueList}"/>
                    <KeyBinding Key="OemPlus" Command="{Binding MoveDownCommand}"
                                CommandParameter="{Binding SelectedItems, ElementName=QueueList}"/>

                    <KeyBinding Key="Subtract" Command="{Binding MoveUpCommand}"
                                CommandParameter="{Binding SelectedItems, ElementName=QueueList}"/>
                    <KeyBinding Key="OemMinus" Command="{Binding MoveUpCommand}"
                                CommandParameter="{Binding SelectedItems, ElementName=QueueList}"/>
                </ListBox.InputBindings>
                <ListBox.Style>
                    <Style TargetType="ListBox">
                        <Setter Property="ItemTemplate" Value="{StaticResource DetailedItemTemplate}"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Model.Setting.ListStyle}" Value="1">
                                <Setter Property="ItemTemplate" Value="{StaticResource NormatlItemTemplate}"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Model.Setting.ListStyle}" Value="2">
                                <Setter Property="ItemTemplate" Value="{StaticResource ShortItemTemplate}"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </ListBox.Style>
                <ListBox.ItemContainerStyle>
                    <Style TargetType="{x:Type ListBoxItem}">
                        <Setter Property="OverridesDefaultStyle" Value="True" />
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ContentControl}">
                                    <Border Background="{TemplateBinding Background}">
                                        <Border BorderBrush="{DynamicResource {x:Static SystemColors.AccentColorBrushKey}}" BorderThickness="{TemplateBinding BorderThickness}"
                                                Background="{TemplateBinding BorderBrush}">
                                            <ContentPresenter Margin="{TemplateBinding BorderThickness, Converter={StaticResource NegateValueConverter}}"/>
                                        </Border>
                                    </Border>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsComplete}" Value="True">
                                <Setter Property="Background" Value="{DynamicResource AMT.StateCompleteBackgroundBrush}"/>
                                <Setter Property="Foreground" Value="{DynamicResource AMT.StateCompleteForegroundBrush}"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding IsEncoding}" Value="True">
                                <Setter Property="Background" Value="{DynamicResource AMT.StateEncodingBackgroundBrush}"/>
                                <Setter Property="Foreground" Value="{DynamicResource AMT.StateEncodingForegroundBrush}"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding IsError}" Value="True">
                                <Setter Property="Background" Value="{DynamicResource AMT.StateErrorBackgroundBrush}"/>
                                <Setter Property="Foreground" Value="{DynamicResource AMT.StateErrorForegroundBrush}"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding IsPending}" Value="True">
                                <Setter Property="Background" Value="{DynamicResource AMT.StatePendingBackgroundBrush}"/>
                                <Setter Property="Foreground" Value="{DynamicResource AMT.StatePendingForegroundBrush}"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding IsCanceled}" Value="True">
                                <Setter Property="Foreground" Value="{DynamicResource AMT.StateCanceledForegroundBrush}"/>
                            </DataTrigger>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="BorderThickness" Value="4"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.AccentColorBrushKey}}"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </ListBox.ItemContainerStyle>
                <ListBox.ContextMenu>
                    <ContextMenu x:Name="queueMenu">
                        <MenuItem Header="ロゴ生成" Style="{StaticResource MenuForSelectedItems}"
                            Command="{Binding OpenLogoAnalyzeCommand}"
                            CommandParameter="{Binding SelectedItems, ElementName=QueueList}"/>
                        <MenuItem Header="ロゴ生成(TS解析あり)" Style="{StaticResource MenuForSelectedItems}"
                            Command="{Binding OpenLogoAnalyzeSlimTsCommand}" 
                            CommandParameter="{Binding SelectedItems, ElementName=QueueList}"/>
                        <Separator />
                        <MenuItem Header="プロファイル設定をテキストでコピー" Style="{StaticResource MenuForSelectedItems}"
                            Command="{Binding CopySettingTextCommand}"
                            CommandParameter="{Binding SelectedItems, ElementName=QueueList}" />
                        <Separator />
                        <MenuItem Header="プロファイル変更" Style="{StaticResource MenuForSelectedItems}"
                                  ItemsSource="{Binding SelectableProfile}">
                            <MenuItem.ItemContainerStyle>
                                <Style TargetType="MenuItem">
                                    <Setter Property="Header" Value="{Binding Path=Item}"/>
                                    <Setter Property="Command" Value="{Binding Path=SelectedCommand}"/>
                                    <Setter Property="CommandParameter" Value="{Binding SelectedItems, ElementName=QueueList}"/>
                                </Style>
                            </MenuItem.ItemContainerStyle>
                        </MenuItem>
                        <MenuItem Header="優先度変更" Style="{StaticResource MenuForSelectedItems}"
                                  ItemsSource="{Binding PriorityList}">
                            <MenuItem.ItemContainerStyle>
                                <Style TargetType="MenuItem">
                                    <Setter Property="Header" Value="{Binding Path=Priority}"/>
                                    <Setter Property="Command" Value="{Binding Path=SelectedCommand}"/>
                                    <Setter Property="CommandParameter" Value="{Binding SelectedItems, ElementName=QueueList}"/>
                                </Style>
                            </MenuItem.ItemContainerStyle>
                        </MenuItem>
                        <Separator />
                        <MenuItem Header="リトライ" Style="{StaticResource MenuForSelectedItems}"
                            Command="{Binding RetryCommand}" 
                            CommandParameter="{Binding SelectedItems, ElementName=QueueList}"
                            ToolTip="アイテムを追加直後の状態に戻します。" />
                        <MenuItem Header="プロファイル再適用" Style="{StaticResource MenuForSelectedItems}"
                            Command="{Binding RetryUpdateCommand}"
                            CommandParameter="{Binding SelectedItems, ElementName=QueueList}"
                            ToolTip="プロファイルが更新されていた場合、新しい設定を適用します" />
                        <MenuItem Header="複製"  Style="{StaticResource MenuForSelectedItems}"
                            Command="{Binding ReAddCommand}" 
                            CommandParameter="{Binding SelectedItems, ElementName=QueueList}"
                            ToolTip="アイテムを同じ設定で複製します" />
                        <Separator />
                        <MenuItem Header="キャンセル" Style="{StaticResource MenuForSelectedItems}"
                            Command="{Binding CancelCommand}" 
                            CommandParameter="{Binding SelectedItems, ElementName=QueueList}"/>
                        <MenuItem Header="{Binding RemoveButtonHeader, Mode=OneWay}" Style="{StaticResource MenuForSelectedItems}"
                            ToolTip="Shiftを押しながらクリックでTSファイルも同時に削除"
                            Command="{Binding RemoveCommand}"
                            CommandParameter="{Binding SelectedItems, ElementName=QueueList}"/>
                        <Separator />
                        <MenuItem Header="強制的に実行" Style="{StaticResource MenuForSelectedItems}"
                            Command="{Binding ForceStartCommand}"
                            CommandParameter="{Binding SelectedItems, ElementName=QueueList}"
                            ToolTip="並列数制限やリソース制限を無視して強制的に実行します" />
                        <Separator />
                        <MenuItem Header="{Binding RemoveCompletedHeader, Mode=OneWay}"
                            ToolTip="Shiftを押しながらクリックでTSファイルも同時に削除"
                            Command="{Binding RemoveCompletedAllCommand}"
                            CommandParameter="{Binding SelectedItems, ElementName=QueueList}"/>
                        <MenuItem Header="ファイルの場所を開く" Style="{StaticResource MenuForSelectedItems}"
                            Command="{Binding OpenFileInExplorerCommand}"
                            CommandParameter="{Binding SelectedItems, ElementName=QueueList}" />
                        <MenuItem Header="ワンセグを表示しない"
                                  IsChecked="{Binding Model.Setting.HideOneSeg, Mode=TwoWay}"
                                  IsCheckable="True" />
                    </ContextMenu>
                </ListBox.ContextMenu>
            </ListBox>
            <TextBlock Text="ここにエンコードするファイルorフォルダをD&amp;D" FontSize="20"
                    IsHitTestVisible="False"
                    HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="#FFBDBDBD">
                <TextBlock.Style>
                    <Style TargetType="TextBlock">
                        <Setter Property="Visibility" Value="Collapsed"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Model.QueueItems.Count}" Value="0">
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </TextBlock.Style>
            </TextBlock>
        </Grid>
    </DockPanel>
</UserControl>
