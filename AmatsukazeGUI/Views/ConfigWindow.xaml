<Window x:Class="Amatsukaze.Views.ConfigWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
        xmlns:v="clr-namespace:Amatsukaze.Views"
        xmlns:vm="clr-namespace:Amatsukaze.ViewModels"
        mc:Ignorable="d" 
        Title="AmatsukazeClient" Width="244.889"
        d:DataContext="{d:DesignInstance {x:Type vm:ConfigWindowViewModel}}"
        SizeToContent="Height" Loaded="Window_Loaded" >

    <Window.Resources>
        <ResourceDictionary Source="CommonResources.xaml"/>
    </Window.Resources>
    
    <i:Interaction.Triggers>

        <!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
        <!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
        <!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています -->

        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->
        <l:InteractionMessageTrigger MessageKey="Close" Messenger="{Binding Messenger}">
            <l:WindowInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False"/>
        </l:InteractionMessageTrigger>

    </i:Interaction.Triggers>

    <StackPanel>
        <TextBlock Text="{Binding Description}" TextWrapping="Wrap" Margin="5" Foreground="Red"/>

        <TextBlock Text="サーバアドレスを入力してください" Margin="6,5,0,0" 
                   TextWrapping="Wrap" VerticalAlignment="Top" Grid.ColumnSpan="2" HorizontalAlignment="Left"/>
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>
            
            <TextBlock Text="サーバIP" VerticalAlignment="Center" Margin="5" Height="16"/>
            <TextBox Grid.Column="1" Text="{Binding ServerIP, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center" TabIndex="1" Margin="5">
                <TextBox.InputBindings>
                    <KeyBinding Key="Enter" Command="{Binding OkCommand, Mode=OneWay}"/>
                </TextBox.InputBindings>
            </TextBox>

            <TextBlock Grid.Row="1" VerticalAlignment="Center" Margin="5" Text="ポート" Height="16"/>
            <DockPanel Grid.Row="1" Grid.Column="1">
                <TextBlock DockPanel.Dock="Right" VerticalAlignment="Center" Margin="5" Height="16" Text="デフォルト値は32768"/>
                <TextBox Text="{Binding ServerPort}" VerticalAlignment="Center" TabIndex="1" Margin="5">
                    <TextBox.InputBindings>
                        <KeyBinding Key="Enter" Command="{Binding OkCommand, Mode=OneWay}"/>
                    </TextBox.InputBindings>
                </TextBox>
            </DockPanel>
        </Grid>
        
        <DockPanel HorizontalAlignment="Center">
            <Button Content="OK" VerticalAlignment="Center" Command="{Binding OkCommand, Mode=OneWay}" Width="75" Margin="5"/>
            <Button Content="Cancel" VerticalAlignment="Center" Width="75" Margin="5">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Click">
                        <l:WindowInteractionMessageAction>
                            <l:DirectInteractionMessage>
                                <l:WindowActionMessage/>
                            </l:DirectInteractionMessage>
                        </l:WindowInteractionMessageAction>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </Button>
        </DockPanel>

    </StackPanel>
</Window>
