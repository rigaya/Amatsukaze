<Window x:Class="Amatsukaze.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:v="clr-namespace:Amatsukaze.Views"
        xmlns:vm="clr-namespace:Amatsukaze.ViewModels"
        xmlns:c="clr-namespace:Amatsukaze.Components"
        Title="{Binding WindowCaption, Mode=OneWay}" Height="550" Width="850"
        SourceInitialized="Window_SourceInitialized" Closing="Window_Closing">
    
    <i:Interaction.Behaviors>
        <c:TaskbarInfoBehavior ProgressState="{Binding Model.ProgressState}" ProgressValue="{Binding Model.ProgressValue}"/>
    </i:Interaction.Behaviors>

    <Window.DataContext>
        <vm:MainWindowViewModel/>
    </Window.DataContext>

    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="CommonResources.xaml"/>
            </ResourceDictionary.MergedDictionaries>
            <Storyboard x:Key="resultChangedAnimation">
                <ColorAnimation  From="Blue" To="White" Duration="0:0:0.2" 
                            Storyboard.TargetName="resultText" 
                            Storyboard.TargetProperty="(TextBlock.Background).(SolidColorBrush.Color)" 
                            FillBehavior="Stop" />
            </Storyboard>
        </ResourceDictionary>
    </Window.Resources>

    <i:Interaction.Triggers>

        <!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
        <!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
        <!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています -->

        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->

        <l:InteractionMessageTrigger Messenger="{Binding Messenger}" MessageKey="FromMain">
            <l:TransitionInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False"/>
        </l:InteractionMessageTrigger>

        <l:InteractionMessageTrigger Messenger="{Binding Messenger}" MessageKey="Message">
            <l:InformationDialogInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False"/>
        </l:InteractionMessageTrigger>

        <l:InteractionMessageTrigger Messenger="{Binding Messenger}" MessageKey="MainWindowAction">
            <v:MainWindowCloseAction />
        </l:InteractionMessageTrigger>

    </i:Interaction.Triggers>
    
    <Grid>
        <Grid.Resources>
            <DataTemplate DataType="{x:Type vm:MakeScriptViewModel}">
                <v:MakeScriptPanel />
            </DataTemplate>
            <DataTemplate DataType="{x:Type vm:LogFileViewModel}">
                <v:LogFilePanel />
            </DataTemplate>
            <DataTemplate DataType="{x:Type vm:ConsoleViewModel}">
                <v:ConsolePanel />
            </DataTemplate>
            <DataTemplate DataType="{x:Type vm:ProfileSettingViewModel}">
                <v:ProfileSettingPanel />
            </DataTemplate>
            <DataTemplate DataType="{x:Type vm:AutoSelectSettingViewModel}">
                <v:AutoSelectSettingPanel />
            </DataTemplate>
            <DataTemplate DataType="{x:Type vm:SettingViewModel}">
                <v:SettingPanel />
            </DataTemplate>
            <DataTemplate DataType="{x:Type vm:ServiceSettingViewModel}">
                <v:ServiceSettingPanel />
            </DataTemplate>
            <DataTemplate DataType="{x:Type vm:QueueViewModel}">
                <v:QueuePanel />
            </DataTemplate>
            <DataTemplate DataType="{x:Type vm:LogViewModel}">
                <v:LogPanel />
            </DataTemplate>
            <DataTemplate DataType="{x:Type vm:DiskFreeSpaceViewModel}">
                <v:DiskFreeSpacePanel />
            </DataTemplate>
            <DataTemplate DataType="{x:Type vm:SummaryViewModel}">
                <v:SummaryPanel />
            </DataTemplate>
            <DataTemplate DataType="{x:Type vm:ClientLogViewModel}">
                <v:ClientLogPanel />
            </DataTemplate>
            <DataTemplate DataType="{x:Type vm:DrcsImageListViewModel}">
                <v:DrcsImageListPanel />
            </DataTemplate>
            <DataTemplate DataType="{x:Type vm:AddQueueConsoleViewModel}">
                <v:AddQueueConsolePanel />
            </DataTemplate>
        </Grid.Resources>
        
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <DockPanel Grid.RowSpan="3" >
            <ListBox DockPanel.Dock="Top" Style="{StaticResource HeaderMenuStyle}"
                     ItemsSource="{Binding MainPanelMenu}" SelectedItem="{Binding SelectedMainPanel, Mode=TwoWay}" />
            <ContentControl Content="{Binding SelectedMainPanel}" />
        </DockPanel>

        <DockPanel Grid.Column="2" >
            <DockPanel.Resources>
                <CollectionViewSource x:Key="ConsoleList" Source="{Binding ConsoleList}"/>
                <CollectionViewSource x:Key="ConsolePanelMenu" Source="{Binding ConsolePanelMenu}"/>
            </DockPanel.Resources>
            <ListBox DockPanel.Dock="Top" SelectedItem="{Binding SelectedConsolePanel, Mode=TwoWay}">
                <ListBox.Style>
                    <Style TargetType="ListBox" BasedOn="{StaticResource HeaderMenuStyle}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsManyConsole}" Value="True">
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="ItemsControl">
                                            <Border Background="Azure">
                                                <WrapPanel IsItemsHost="True" />
                                            </Border>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="ItemTemplate">
                                    <Setter.Value>
                                        <DataTemplate>
                                            <TextBlock Margin="3" Text="{Binding ShortName}" TextAlignment="Center" MinWidth="20"/>
                                        </DataTemplate>
                                    </Setter.Value>
                                </Setter>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </ListBox.Style>
                <ListBox.ItemsSource>
                    <CompositeCollection>
                        <CollectionContainer Collection="{Binding Source={StaticResource ConsoleList}}"/>
                        <CollectionContainer Collection="{Binding Source={StaticResource ConsolePanelMenu}}"/>
                    </CompositeCollection>
                </ListBox.ItemsSource>
            </ListBox>
            <ContentControl Grid.Row="1" Content="{Binding SelectedConsolePanel}" />
        </DockPanel>

        <DockPanel Grid.Column="2" Grid.Row="2">
            <ListBox DockPanel.Dock="Top" Style="{StaticResource HeaderMenuStyle}" 
                     ItemsSource="{Binding InfoPanelMenu}" SelectedItem="{Binding SelectedInfoPanel, Mode=TwoWay}" />
            <ContentControl Grid.Row="1" Content="{Binding SelectedInfoPanel}" />
        </DockPanel>

        <GridSplitter HorizontalAlignment="Center" Grid.RowSpan="3" Grid.Column="1" Width="5" ResizeDirection="Columns"/>
        <GridSplitter VerticalAlignment="Center" Grid.Row="1" Grid.Column="2" Height="5" ResizeDirection="Rows" HorizontalAlignment="Stretch"/>

        <DockPanel Grid.Row="4" Grid.ColumnSpan="3">
            <Button DockPanel.Dock="Left" Width="50" Content="更新" Command="{Binding RefreshCommand, Mode=OneWay}" HorizontalAlignment="Left" />
            <Button DockPanel.Dock="Left" Width="50" Content="接続先" Command="{Binding ChangeServerCommand, Mode=OneWay}">
                <Button.Style>
                    <Style TargetType="Button" BasedOn="{StaticResource ButtonStyle}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Model.IsStandalone, Mode=OneWay}" Value="True">
                                <Setter Property="Visibility" Value="Collapsed"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>
            <Border DockPanel.Dock="Right" Width="60" BorderBrush="#FFDBB7B7" BorderThickness="1">
                <TextBlock Text="{Binding RunningState}"
                       TextAlignment="Center" VerticalAlignment="Center" />
            </Border>
            <ContentControl DockPanel.Dock="Right" DataContext="{Binding QueueVM}" VerticalAlignment="Center" Margin="5,0">
                <TextBlock DockPanel.Dock="Bottom">
                    アクティブ:<Run Text="{Binding Active, Mode=OneWay}"/>（処理中:<Run Text="{Binding Encoding, Mode=OneWay}"/> ペンディング:<Run Text="{Binding Pending, Mode=OneWay}"/>）完了:<Run Text="{Binding Complete, Mode=OneWay}"/> 失敗:<Run Text="{Binding Fail, Mode=OneWay}"/> キャンセル:<Run Text="{Binding Canceled, Mode=OneWay}"/>
                </TextBlock>
            </ContentControl>
            <TextBlock x:Name="resultText" Text="{Binding Model.CurrentOperationResult}"
                       Margin="10,0" Grid.Column="1" VerticalAlignment="Center"
                       Foreground="{Binding StatusForeColor}"
                       Background="{Binding StatusBackColor}"/>
        </DockPanel>
    </Grid>
</Window>
