<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Amatsukaze.Views"
                    xmlns:m="clr-namespace:Amatsukaze.Models"
                    xmlns:c="clr-namespace:Amatsukaze.Components">

    <Style x:Key="HeaderMenuStyle" TargetType="ListBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ItemsControl">
                    <Border Background="{DynamicResource AMT.HeaderBackgroundBrush}">
                        <UniformGrid Rows="1" IsItemsHost="True" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{DynamicResource AMT.ControlForegroundBrush}"/>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Margin="3" Text="{Binding Name}" HorizontalAlignment="Stretch"
                               VerticalAlignment="Center" TextAlignment="Center" Height="16" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="ListBoxItem">
                    <Setter Property="OverridesDefaultStyle" Value="True"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ContentControl}">
                                <Border BorderThickness="0.5" BorderBrush="{DynamicResource AMT.BorderBrush}" CornerRadius="5" Background="{TemplateBinding Background}">
                                    <ContentPresenter />
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="{DynamicResource AMT.SelectionBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource AMT.SelectionForegroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource AMT.ControlLightBrush}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource AMT.AccentBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource AMT.SelectionForegroundBrush}" />
                        </MultiTrigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- 既定のテキスト色をテーマの前景に統一 -->
    <Style TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource AMT.ControlForegroundBrush}"/>
    </Style>

    <!-- GroupBox の枠線をシンプルな細い単線に統一（ライト/ダーク両対応） -->
    <Style TargetType="GroupBox">
        <Setter Property="BorderBrush" Value="{DynamicResource AMT.BorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource AMT.ControlForegroundBrush}"/>
        <!-- 背景は透明にして親の背景となじませる（Light時の色ズレ防止） -->
        <Setter Property="Background" Value="Transparent"/>
        <!-- ヘッダ専用の背景色を差し替え可能にする（既定はControl背景） -->
        <Setter Property="Tag" Value="{DynamicResource AMT.ControlBackgroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GroupBox">
                    <Grid SnapsToDevicePixels="True" ClipToBounds="True">
                        <!-- 枠線。本体の上部に6pxの余白を作り、ヘッダを上に重ねる -->
                        <Border x:Name="OuterBorder"
                                Margin="0,10,0,0"
                                CornerRadius="4"
                                BorderThickness="1"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Background="{TemplateBinding Background}"/>

                        <!-- コンテンツ領域。ヘッダ分だけ上に余白 -->
                        <ContentPresenter x:Name="PART_Content"
                                          Margin="8,18,8,8"
                                          Content="{TemplateBinding Content}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          HorizontalAlignment="Stretch"
                                          VerticalAlignment="Stretch"/>

                        <!-- ヘッダ。周囲背景色と同化させて枠の上に乗せる -->
                        <Border x:Name="HeaderBackground"
                                Background="{TemplateBinding Tag}"
                                Padding="4,0"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Top"
                                Margin="12,-1,0,0">
                            <ContentPresenter x:Name="PART_Header"
                                              ContentSource="Header"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="True"/>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ButtonStyle" TargetType="ButtonBase">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ButtonBase">
                    <Border BorderThickness="0.5" BorderBrush="{DynamicResource AMT.BorderBrush}" CornerRadius="5" Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource AMT.ControlBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource AMT.ControlForegroundBrush}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource AMT.ControlLightBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource AMT.DisabledForegroundBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Button" BasedOn="{StaticResource ButtonStyle}"/>

    <!-- 標準テーマ用の ComboBox テンプレート（従来風） -->
    <ControlTemplate x:Key="MyComboboxTemplateStandard" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition MinWidth="18" Width="0"/>
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup" AllowsTransparency="True" Grid.ColumnSpan="2" 
                       IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                       Margin="1" PopupAnimation="None" Placement="Bottom"
                       MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                <Border x:Name="DropDownBorder"
                            BorderBrush="{DynamicResource AMT.BorderBrush}" 
                            BorderThickness="1" 
                            Background="{DynamicResource AMT.PopupBackgroundBrush}">
                    <ScrollViewer x:Name="DropDownScrollViewer">
                        <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                            <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                <Rectangle x:Name="OpaqueRect"
                                            Fill="{Binding Background, ElementName=DropDownBorder}" 
                                            Height="{Binding ActualHeight, ElementName=DropDownBorder}" 
                                            Width="{Binding ActualWidth, ElementName=DropDownBorder}"/>
                            </Canvas>
                            <ItemsPresenter x:Name="ItemsPresenter" 
                                                KeyboardNavigation.DirectionalNavigation="Contained"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Grid>
                    </ScrollViewer>
                </Border>
            </Popup>
            <ToggleButton x:Name="toggleButton" 
                              Grid.ColumnSpan="2" 
                              BorderBrush="{TemplateBinding BorderBrush}"
                              BorderThickness="{TemplateBinding BorderThickness}"
                              Background="{TemplateBinding Background}" 
                              IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                              OverridesDefaultStyle="True"
                              IsTabStop="False"
                              Focusable="False"
                              ClickMode="Press">
                <ToggleButton.Template>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border x:Name="templateRoot"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Background="{TemplateBinding Background}" 
                                    CornerRadius="5"
                                    SnapsToDevicePixels="True">
                                <Border x:Name="splitBorder"
                                        BorderBrush="Transparent"
                                        BorderThickness="1"
                                        HorizontalAlignment="Right"
                                        Margin="0" 
                                        SnapsToDevicePixels="True" 
                                        Width="18">
                                <Path x:Name="Arrow" Data="F1M0,0L2.667,2.66665 5.3334,0 5.3334,-1.78168 2.6667,0.88501 0,-1.78168 0,0z" Fill="{DynamicResource AMT.ControlForegroundBrush}" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center"/>
                            </Border>
                        </Border>
                        <ControlTemplate.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true"/>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource AMT.ControlBackgroundBrush}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource AMT.BorderBrush}"/>
                                <Setter Property="Background" TargetName="splitBorder" Value="Transparent"/>
                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="Transparent"/>
                            </MultiDataTrigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Fill" TargetName="Arrow" Value="{DynamicResource AMT.ControlForegroundBrush}"/>
                            </Trigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="false"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource AMT.ControlLightBrush}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource AMT.AccentBrush}"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource AMT.ControlBackgroundBrush}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource AMT.AccentBrush}"/>
                                <Setter Property="Background" TargetName="splitBorder">
                                    <Setter.Value>
                                        <SolidColorBrush Color="{DynamicResource {x:Static SystemColors.ControlLightColorKey}}"/>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="{DynamicResource AMT.AccentBrush}"/>
                            </MultiDataTrigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Fill" TargetName="Arrow" Value="{DynamicResource AMT.ControlForegroundBrush}"/>
                            </Trigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="false"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource AMT.ControlDarkBrush}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource AMT.AccentBrush}"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource AMT.ControlBackgroundBrush}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource AMT.AccentBrush}"/>
                                <Setter Property="Background" TargetName="splitBorder">
                                    <Setter.Value>
                                        <SolidColorBrush Color="{DynamicResource {x:Static SystemColors.ControlLightColorKey}}"/>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="{DynamicResource AMT.AccentBrush}"/>
                            </MultiDataTrigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Fill" TargetName="Arrow" Value="{DynamicResource AMT.DisabledForegroundBrush}"/>
                            </Trigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="false"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource AMT.ControlLightBrush}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource AMT.BorderBrush}"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource AMT.ControlBackgroundBrush}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource AMT.BorderBrush}"/>
                                <Setter Property="Background" TargetName="splitBorder" Value="Transparent"/>
                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="Transparent"/>
                            </MultiDataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </ToggleButton.Template>
            </ToggleButton>
            <ContentPresenter x:Name="contentPresenter"
                                  ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" 
                                  Content="{TemplateBinding SelectionBoxItem}" 
                                  ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" 
                                  HorizontalAlignment="Center" 
                                  IsHitTestVisible="False" 
                                  Margin="{TemplateBinding Padding}" 
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="False">
                <Setter Property="Height" TargetName="DropDownBorder" Value="95"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="True"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
            </MultiTrigger>
            <Trigger Property="CanContentScroll" SourceName="DropDownScrollViewer" Value="False">
                <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="ComboBox" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="Background" Value="{DynamicResource AMT.ControlBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource AMT.ControlForegroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource AMT.BorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="8,0,28,0"/>
        <Setter Property="MinHeight" Value="22"/>
        <Setter Property="MinWidth" Value="60"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Style.Triggers>
            <!-- 標準テーマのときだけ従来テンプレートを適用 -->
            <!-- ライト/ダークのときは適用しない(そうしないとおかしな描画になる) -->
            <DataTrigger Binding="{Binding Source={x:Static Application.Current}, Path=Resources[AMT.IsStandardTheme]}" Value="True">
                <Setter Property="Template" Value="{StaticResource MyComboboxTemplateStandard}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- ドロップダウン内の項目配色（ライト/ダーク連動） -->
    <Style TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource {x:Type ComboBoxItem}}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource AMT.ControlForegroundBrush}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource AMT.ControlLightBrush}"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource AMT.SelectionBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource AMT.SelectionForegroundBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource AMT.DisabledForegroundBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Fluent(ライト/ダーク)適用時のTextBoxテキスト下欠け/縦位置ずれ対策。
         既存Height=22指定に合わせ、Paddingを0、MinHeightを0、垂直中央寄せにする。 -->
    <Style TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="Padding" Value="0"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
    </Style>

    <!-- 既定CheckBoxスタイル(Fluent時の縦位置/余白を微調整) -->
    <Style x:Key="BaseCheckBoxStyle" TargetType="CheckBox" BasedOn="{StaticResource {x:Type CheckBox}}">
        <Setter Property="Margin" Value="0,0"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <!-- アプリ全体のCheckBox既定値を統一（高さ・縦位置を一定化） -->
    <Style TargetType="CheckBox" BasedOn="{StaticResource BaseCheckBoxStyle}">
        <Setter Property="Height" Value="22"/>
    </Style>

    <!-- Linux時に非表示にするCheckBox用スタイル（既定にBasedOnして見た目は統一） -->
    <Style x:Key="CheckBoxHideOnLinux" TargetType="CheckBox" BasedOn="{StaticResource {x:Type CheckBox}}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Model.Setting.IsServerLinux}" Value="True">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- Fluent(ライト/ダーク)時のListBoxアイテムをコンパクトにする -->
    <Style x:Key="AMT.CompactListBoxItemStyle" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource {x:Type ListBoxItem}}">
        <Setter Property="Padding" Value="4,1"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>
    <!-- 既定のListBoxに対し、標準テーマ以外(Fluentライト/ダーク)のときだけコンテナスタイルを上書き -->
    <Style TargetType="{x:Type ListBox}" BasedOn="{StaticResource {x:Type ListBox}}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static Application.Current}, Path=Resources[AMT.IsStandardTheme]}" Value="False">
                <Setter Property="ItemContainerStyle" Value="{StaticResource AMT.CompactListBoxItemStyle}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <DataTemplate DataType="{x:Type m:DisplayProfile}">
        <TextBlock Text="{Binding Name, Mode=OneWay}"/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type m:DisplayAutoSelect}">
        <TextBlock Text="{Binding Name, Mode=OneWay}"/>
    </DataTemplate>

    <c:InverseBooleanConverter x:Key="InverseBooleanConverter"/>
    <c:NegateValueConverter x:Key="NegateValueConverter"/>
</ResourceDictionary>