<UserControl
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
             xmlns:clr="clr-namespace:System;assembly=mscorlib"
             xmlns:vm="clr-namespace:Amatsukaze.ViewModels" 
             xmlns:m="clr-namespace:Amatsukaze.Models" 
             xmlns:c="clr-namespace:Amatsukaze.Components" 
             xmlns:Models="clr-namespace:Amatsukaze.Models" x:Class="Amatsukaze.Views.SettingPanel" 
             mc:Ignorable="d" 
             d:DesignHeight="1900" d:DesignWidth="500" d:Background="White"
             d:DataContext="{d:DesignInstance {x:Type vm:SettingViewModel}}">
    
    <UserControl.Resources>
        <ResourceDictionary Source="CommonResources.xaml"/>
    </UserControl.Resources>

    <DockPanel>
        <DockPanel DockPanel.Dock="Bottom">
            <Button DockPanel.Dock="Right" Content="適用" Margin="5" VerticalAlignment="Center" HorizontalAlignment="Right" Width="60" Command="{Binding SendSettingCommand}" Height="27"/>
            <TextBlock TextWrapping="Wrap" VerticalAlignment="Center"><Run Text="「適用」で反映。「更新」を押すと編集中の設定が失われるので注意"/></TextBlock>
        </DockPanel>
       
        <ScrollViewer VerticalScrollBarVisibility="Auto" Padding="0,2,8,4">
            <Grid Grid.IsSharedSizeScope="True">
                <Grid.Resources>
                    <Style x:Key="ExtendDuration" TargetType="FrameworkElement">
                        <Setter Property="ToolTipService.ShowDuration" Value="30000" />
                    </Style>
                    <Style TargetType="TextBox" BasedOn="{c:MultiStyle . ExtendDuration}" />
                    <Style TargetType="Slider" BasedOn="{c:MultiStyle . ExtendDuration}" />
                    <Style TargetType="ComboBox" BasedOn="{c:MultiStyle . ExtendDuration}" />
                    <Style TargetType="CheckBox" BasedOn="{c:MultiStyle . ExtendDuration}" />
                </Grid.Resources>

                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="LabelCol"/>
                    <ColumnDefinition />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <StackPanel>
                    <TextBlock HorizontalAlignment="Right" Text="テーマ" VerticalAlignment="Center" Margin="0,8,0,4"/>
                    <TextBlock HorizontalAlignment="Right" Text="一時フォルダ (重要)" VerticalAlignment="Top" Margin="0,8,0,4"/>
                    <TextBlock HorizontalAlignment="Right" Text="" VerticalAlignment="Top" Margin="0,5"/>
                    <TextBlock HorizontalAlignment="Right" Text="" VerticalAlignment="Top" Margin="0,5"/>
                    <TextBlock HorizontalAlignment="Right" Text="" VerticalAlignment="Top" Margin="0,5"/>
                </StackPanel>

                <StackPanel Grid.Column="1" Margin="12,2,0,0">
                    <ComboBox Margin="0,4" Height="22" SelectedValuePath="Tag" SelectedValue="{Binding Model.ThemePreference, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                        <ComboBoxItem Content="自動" Tag="Auto"/>
                        <ComboBoxItem Content="標準" Tag="Standard"/>
                        <ComboBoxItem Content="ライト" Tag="Light"/>
                        <ComboBoxItem Content="ダーク" Tag="Dark"/>
                        <ComboBox.ToolTip>
                            <TextBlock>
                                テーマを選択すると、アプリ全体のテーマが変わります。
                                <LineBreak/>「自動」を選択すると、Windowsのアプリテーマに追随します。
                                <LineBreak/> <Run Foreground="Coral">注意：完全な反映にはアプリの再起動が必要です。</Run>
                            </TextBlock>
                        </ComboBox.ToolTip>
                    </ComboBox>
                    <TextBox Margin="0,4" Height="23" 
                             Text="{Binding Model.Setting.WorkPath, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                             VerticalAlignment="Top" PreviewDragOver="TextBox_PreviewDragOver" Drop="TextBox_Drop" 
                     ToolTip="重要です。なるべくSSDなどの高速なストレージを使ってください。&#xA;たまにゴミが残るので終了しても残っているファイルがあったら削除してください。"/>
                    <CheckBox Height="16" Margin="0,4"  Content="開始時に一時フォルダを空にする" 
                              IsChecked="{Binding Model.Setting.ClearWorkDirOnStart, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                    <CheckBox Height="16" Margin="0,4"  Content="エンコード中はスリープしないようにする" 
                              IsChecked="{Binding Model.Setting.SupressSleep, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                        <CheckBox.Style>
                            <Style BasedOn="{StaticResource BaseCheckBoxStyle}" TargetType="CheckBox">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Model.Setting.IsServerLinux}" Value="True">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </CheckBox.Style>
                    </CheckBox>
                    <CheckBox Height="16" Margin="0,4"  Content="Amatsukaze起動時にアクティブなアイテムがあるときはキューを停止する" 
                              IsChecked="{Binding Model.Setting.PauseOnStarted, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                </StackPanel>

                <StackPanel Grid.Row="1" Grid.Column="0">
                    <TextBlock HorizontalAlignment="Right" Height="16" Margin="0,7" Text="AmatsukazeCLIパス"/>
                    <TextBlock HorizontalAlignment="Right" Height="16" Margin="0,7" Text="x264パス"/>
                    <TextBlock HorizontalAlignment="Right" Height="16" Margin="0,7" Text="x265パス"/>
                    <TextBlock HorizontalAlignment="Right" Height="16" Margin="0,7" Text="SvtAv1EncAppパス"/>
                    <TextBlock HorizontalAlignment="Right" Height="16" Margin="0,7" Text="QSVEncCパス"/>
                    <TextBlock HorizontalAlignment="Right" Height="16" Margin="0,7" Text="NVEncCパス"/>
                    <TextBlock HorizontalAlignment="Right" Height="16" Margin="0,7" Text="VCEEncCパス"/>
                    <TextBlock HorizontalAlignment="Right" Height="16" Margin="0,7" Text="L-SMASH Muxerパス"/>
                    <TextBlock HorizontalAlignment="Right" Height="16" Margin="0,7" Text="mkvmergeパス"/>
                    <TextBlock HorizontalAlignment="Right" Height="16" Margin="0,7" Text="MP4Boxパス"/>
                    <TextBlock HorizontalAlignment="Right" Height="16" Margin="0,7" Text="TimelineEditorパス"/>
                    <TextBlock HorizontalAlignment="Right" Height="16" Margin="0,7" Text="ChapterExeパス"/>
                    <TextBlock HorizontalAlignment="Right" Height="16" Margin="0,7" Text="JoinLogoScpパス"/>
                    <TextBlock HorizontalAlignment="Right" Height="16" Margin="0,7" Text="NicoConvASSパス">
                        <TextBlock.Style>
                            <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Model.Setting.IsServerLinux}" Value="True">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                    <TextBlock HorizontalAlignment="Right" Height="16" Margin="0,7" Text="tsreplaceパス"/>
                    <TextBlock HorizontalAlignment="Right" Height="16" Margin="0,7" Text="tsMuxeRパス">
                        <TextBlock.Style>
                            <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Model.Setting.IsServerLinux}" Value="True">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                    <TextBlock HorizontalAlignment="Right" Height="16" Margin="0,7" Text="SCRename.vbs/pyパス" />
                    <TextBlock HorizontalAlignment="Right" Height="16" Margin="0,7" Text="AutoVfr.exeパス">
                        <TextBlock.Style>
                            <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Model.Setting.IsServerLinux}" Value="True">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                    <TextBlock HorizontalAlignment="Right" Height="16" Margin="0,7" Text="neroAacEnc.exeパス">
                        <TextBlock.Style>
                            <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Model.Setting.IsServerLinux}" Value="True">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                    <TextBlock HorizontalAlignment="Right" Height="16" Margin="0,7" Text="qaac.exeパス">
                        <TextBlock.Style>
                            <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Model.Setting.IsServerLinux}" Value="True">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                    <TextBlock HorizontalAlignment="Right" Height="16" Margin="0,7" Text="fdkaac.exeパス"/>
                    <TextBlock HorizontalAlignment="Right" Height="16" Margin="0,7" Text="opusenc.exeパス"/>
                </StackPanel>
                <DockPanel Grid.Row="1" Grid.Column="1" Margin="12,0,0,0">
                    <StackPanel DockPanel.Dock="Right">
                        <StackPanel.Resources>
                            <clr:String x:Key="tooltip">クリア後「適用」するとデフォルト値が入ります。</clr:String>
                        </StackPanel.Resources>
                        <Button Height="22" Content="クリア" Margin="6,4" ToolTip="{StaticResource tooltip}" Command="{Binding ClearAmatsukazePathCommand}"/>
                        <Button Height="22" Content="クリア" Margin="6,4" ToolTip="{StaticResource tooltip}" Command="{Binding ClearX264PathCommand}"/>
                        <Button Height="22" Content="クリア" Margin="6,4" ToolTip="{StaticResource tooltip}" Command="{Binding ClearX265PathCommand}"/>
                        <Button Height="22" Content="クリア" Margin="6,4" ToolTip="{StaticResource tooltip}" Command="{Binding ClearSVTAV1PathCommand}"/>
                        <Border Height="30"/>
                        <Border Height="30"/>
                        <Border Height="30"/>
                        <Button Height="22" Content="クリア" Margin="6,4" ToolTip="{StaticResource tooltip}" Command="{Binding ClearMuxerPathCommand}"/>
                        <Button Height="22" Content="クリア" Margin="6,4" ToolTip="{StaticResource tooltip}" Command="{Binding ClearMKVMergePathCommand}"/>
                        <Button Height="22" Content="クリア" Margin="6,4" ToolTip="{StaticResource tooltip}" Command="{Binding ClearMP4BoxPathCommand}"/>
                        <Button Height="22" Content="クリア" Margin="6,4" ToolTip="{StaticResource tooltip}" Command="{Binding ClearTimelineEditorPathCommand}"/>
                        <Button Height="22" Content="クリア" Margin="6,4" ToolTip="{StaticResource tooltip}" Command="{Binding ClearChapterExepathCommand}"/>
                        <Button Height="22" Content="クリア" Margin="6,4" ToolTip="{StaticResource tooltip}" Command="{Binding ClearJoinLogoScpPathCommand}"/>
                        <Button Height="22" Content="クリア" Margin="6,4" ToolTip="{StaticResource tooltip}" Command="{Binding ClearNicoConvASSPathCommand}">
                            <Button.Style>
                                <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Model.Setting.IsServerLinux}" Value="True">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>
                        <Button Height="22" Content="クリア" Margin="6,4" ToolTip="{StaticResource tooltip}" Command="{Binding ClearTsReplacePathCommand}"/>
                        <Border Height="30"/>
                        <Button Height="22" Content="クリア" Margin="6,4" ToolTip="{StaticResource tooltip}" Command="{Binding ClearSCRenamePathCommand}"/>
                        <Border Height="30"/>
                        <Border Height="30"/>
                        <Border Height="30"/>
                        <Button Height="22" Content="クリア" Margin="6,4" ToolTip="{StaticResource tooltip}" Command="{Binding ClearFdkaacPathCommand}"/>
                        <Button Height="22" Content="クリア" Margin="6,4" ToolTip="{StaticResource tooltip}" Command="{Binding ClearOpusEncPathCommand}"/>
                    </StackPanel>
                    <TextBlock DockPanel.Dock="Bottom" TextWrapping="Wrap" Margin="6,6,6,8"
                               Text="右に「クリア」ボタンのある項目はAmatsukazeに同梱されているファイルがあります。「クリア」後「適用」すると同梱ファイルへのパスが設定されます。通常、問題なければ同梱ファイルを使ってください。「クリア」ボタンのない項目は同梱ファイルがないので、必要に応じて入手してパスを設定してください。"/>
                    <StackPanel>
                        <TextBox Height="22" Margin="0,4" Text="{Binding Model.Setting.AmatsukazePath, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Top" PreviewDragOver="TextBox_PreviewDragOver" Drop="TextBox_Drop"/>
                        <TextBox Height="22" Margin="0,4" Text="{Binding Model.Setting.X264Path, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Top" PreviewDragOver="TextBox_PreviewDragOver" Drop="TextBox_Drop"/>
                        <TextBox Height="22" Margin="0,4" Text="{Binding Model.Setting.X265Path, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Top" PreviewDragOver="TextBox_PreviewDragOver" Drop="TextBox_Drop"/>
                        <TextBox Height="22" Margin="0,4" Text="{Binding Model.Setting.SVTAV1Path, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Top" PreviewDragOver="TextBox_PreviewDragOver" Drop="TextBox_Drop"/>
                        <TextBox Height="22" Margin="0,4" Text="{Binding Model.Setting.QSVEncPath, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Top" PreviewDragOver="TextBox_PreviewDragOver" Drop="TextBox_Drop"/>
                        <TextBox Height="22" Margin="0,4" Text="{Binding Model.Setting.NVEncPath, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Top" PreviewDragOver="TextBox_PreviewDragOver" Drop="TextBox_Drop"/>
                        <TextBox Height="22" Margin="0,4" Text="{Binding Model.Setting.VCEEncPath, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Top" PreviewDragOver="TextBox_PreviewDragOver" Drop="TextBox_Drop"/>
                        <TextBox Height="22" Margin="0,4" Text="{Binding Model.Setting.MuxerPath, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Top" PreviewDragOver="TextBox_PreviewDragOver" Drop="TextBox_Drop"/>
                        <TextBox Height="22" Margin="0,4" Text="{Binding Model.Setting.MKVMergePath, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Top" PreviewDragOver="TextBox_PreviewDragOver" Drop="TextBox_Drop"/>
                        <TextBox Height="22" Margin="0,4" Text="{Binding Model.Setting.MP4BoxPath, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Top" PreviewDragOver="TextBox_PreviewDragOver" Drop="TextBox_Drop"/>
                        <TextBox Height="22" Margin="0,4" Text="{Binding Model.Setting.TimelineEditorPath, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Top" PreviewDragOver="TextBox_PreviewDragOver" Drop="TextBox_Drop"/>
                        <TextBox Height="22" Margin="0,4" Text="{Binding Model.Setting.ChapterExePath, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Top" PreviewDragOver="TextBox_PreviewDragOver" Drop="TextBox_Drop"/>
                        <TextBox Height="22" Margin="0,4" Text="{Binding Model.Setting.JoinLogoScpPath, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Top" PreviewDragOver="TextBox_PreviewDragOver" Drop="TextBox_Drop"/>
                        <TextBox Height="22" Margin="0,4" Text="{Binding Model.Setting.NicoConvASSPath, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Top" PreviewDragOver="TextBox_PreviewDragOver" Drop="TextBox_Drop">
                            <TextBox.Style>
                                <Style TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Model.Setting.IsServerLinux}" Value="True">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBox.Style>
                        </TextBox>
                        <TextBox Height="22" Margin="0,4" Text="{Binding Model.Setting.TsReplacePath, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Top" PreviewDragOver="TextBox_PreviewDragOver" Drop="TextBox_Drop"/>
                        <TextBox Height="22" Margin="0,4" Text="{Binding Model.Setting.TsMuxeRPath, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Top" PreviewDragOver="TextBox_PreviewDragOver" Drop="TextBox_Drop">
                            <TextBox.Style>
                                <Style TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Model.Setting.IsServerLinux}" Value="True">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBox.Style>
                        </TextBox>
                        <TextBox Height="22" Margin="0,4" Text="{Binding Model.Setting.SCRenamePath, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Top" PreviewDragOver="TextBox_PreviewDragOver" Drop="TextBox_Drop" />
                        <TextBox Height="22" Margin="0,4" Text="{Binding Model.Setting.AutoVfrPath, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Top" PreviewDragOver="TextBox_PreviewDragOver" Drop="TextBox_Drop">
                            <TextBox.Style>
                                <Style TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Model.Setting.IsServerLinux}" Value="True">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBox.Style>
                        </TextBox>
                        <TextBox Height="22" Margin="0,4" Text="{Binding Model.Setting.NeroAacEncPath, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Top" PreviewDragOver="TextBox_PreviewDragOver" Drop="TextBox_Drop">
                            <TextBox.Style>
                                <Style TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Model.Setting.IsServerLinux}" Value="True">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBox.Style>
                        </TextBox>
                        <TextBox Height="22" Margin="0,4" Text="{Binding Model.Setting.QaacPath, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Top" PreviewDragOver="TextBox_PreviewDragOver" Drop="TextBox_Drop">
                            <TextBox.Style>
                                <Style TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Model.Setting.IsServerLinux}" Value="True">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBox.Style>
                        </TextBox>
                        <TextBox Height="22" Margin="0,4" Text="{Binding Model.Setting.FdkaacPath, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Top" PreviewDragOver="TextBox_PreviewDragOver" Drop="TextBox_Drop"/>
                        <TextBox Height="22" Margin="0,4" Text="{Binding Model.Setting.OpusEncPath, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Top" PreviewDragOver="TextBox_PreviewDragOver" Drop="TextBox_Drop"/>
                    </StackPanel>
                </DockPanel>

                <StackPanel Grid.Row="2" Grid.Column="0">
                    <TextBlock HorizontalAlignment="Right" Height="16" Margin="0,6" Text="常時表示ディスク"/>
                </StackPanel>
                <DockPanel Grid.Row="2" Grid.Column="1" Margin="10,0,0,0">
                    <StackPanel>
                        <TextBox Height="22" Margin="0,3,10,3" Text="{Binding Model.Setting.AlwaysShowDisk, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Top" PreviewDragOver="TextBox_PreviewDragOver" Drop="TextBox_Drop"
                            ToolTip="「ディスク空き」パネルの表示が追加されます。&#xA;;（セミコロン）で区切ることで複数設定することができます"/>
                    </StackPanel>
                </DockPanel>

                <StackPanel Grid.Row="3" Grid.Column="0">
                    <TextBlock HorizontalAlignment="Right" Height="22" VerticalAlignment="Center" Margin="0,4" Text="x265VFR時間レート" Grid.IsSharedSizeScope="False"/>
                </StackPanel>
                <StackPanel Grid.Row="4" Grid.Column="0">
                    <TextBlock HorizontalAlignment="Right" Height="22" VerticalAlignment="Center" Margin="0,4" Text="キュー動作"/>
                </StackPanel>
                <StackPanel Grid.Row="5" Grid.Column="0">
                    <TextBlock HorizontalAlignment="Right" Height="22" VerticalAlignment="Center" Margin="0,4" Text="フィルタグラフ出力"/>
                </StackPanel>
                <StackPanel Grid.Row="6" Grid.Column="0">
                    <TextBlock HorizontalAlignment="Right" Height="22" VerticalAlignment="Center" Margin="0,4" Text="CLIログ表示"/>
                </StackPanel>
                <StackPanel Grid.Row="7" Grid.Column="0">
                    <TextBlock HorizontalAlignment="Right" Height="22" VerticalAlignment="Center" Margin="0,4" Text="古いログの削除"/>
                </StackPanel>

                <StackPanel Grid.Row="3" Grid.Column="1">
                    <DockPanel  Margin="12,0,0,0" ToolTip="x265で擬似VFRレートコントロールするときの時間レートファクター。 デフォルト値: 0.25&#xA;VFRで24fpsや30fps部分のビットレートがこの値に連動します。&#xA;CRFモードでVFRで出力したときと60fpsで出力したときでビットレートが一致するように調整するのが理想です。">
                        <DockPanel.Resources>
                            <l:VisibilityAndBooleanConverter x:Key="VisibilityAndBooleanConverter" ConvertWhenTrue="Visible" ConvertWhenFalse="Hidden"/>
                        </DockPanel.Resources>
                        <CheckBox DockPanel.Dock="Left" VerticalAlignment="Center" Content="デフォルト値を使う" Margin="0,0" Height="22" IsChecked="{Binding Model.Setting.EnableX265VFRTimeFactor, Mode=TwoWay, Converter={StaticResource InverseBooleanConverter}}"/>
                        <TextBlock DockPanel.Dock="Right" TextWrapping="Wrap" Width="30" VerticalAlignment="Center" HorizontalAlignment="Center" Visibility="{Binding Model.Setting.EnableX265VFRTimeFactor, Mode=OneWay, Converter={StaticResource VisibilityAndBooleanConverter}}" Text="{Binding Model.Setting.X265VFRTimeFactor, StringFormat=N2}"/>
                        <Slider Margin="8,4,2,4" Height="26" SmallChange="0.01" Maximum="1" Minimum="0" Value="{Binding Model.Setting.X265VFRTimeFactor, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding Model.Setting.EnableX265VFRTimeFactor, Mode=OneWay}" LargeChange="0.01" TickFrequency="0.1"/>
                    </DockPanel>
                </StackPanel>
                <StackPanel Grid.Row="4" Grid.Column="1">
                    <CheckBox  Margin="12,0,0,0" Height="22" Content="ロゴ設定がない場合はエラー扱いにする" IsChecked="{Binding Model.Setting.LogoPendAsError, Mode=TwoWay}"/>
                </StackPanel>
                <StackPanel Grid.Row="5" Grid.Column="1">
                    <CheckBox  Margin="12,0,0,0" Height="22" Content="フィルタグラフを出力する" IsChecked="{Binding Model.Setting.DumpFilter, Mode=TwoWay}"/>
                </StackPanel>
                <StackPanel Grid.Row="6" Grid.Column="1">
                    <CheckBox  Margin="12,0,0,0" Height="22" Content="ログの先頭に時刻を表示する" IsChecked="{Binding Model.Setting.PrintTimePrefix, Mode=TwoWay}"/>
                </StackPanel>
                <StackPanel Grid.Row="7" Grid.Column="1">
                    <DockPanel Margin="12,0,0,0">
                        <CheckBox  Margin="0,4" Height="22" IsChecked="{Binding Model.Setting.DeleteOldLogs, Mode=TwoWay}"/>
                        <TextBox Width="50" Height="22" Margin="4,0" HorizontalAlignment="Left" VerticalAlignment="Center" Text="{Binding Model.Setting.DeleteOldLogsDays, Mode=TwoWay, StringFormat=\{0:D\}}" />
                        <TextBlock VerticalAlignment="Center" Text="日経過したログファイルを自動削除する"/>
                    </DockPanel>
                </StackPanel>

                <TextBlock Grid.Row="8" Grid.Column="0" Text="エンコード後設定" HorizontalAlignment="Right" VerticalAlignment="Center"/>
                <StackPanel Grid.Row="8" Grid.Column="1" Margin="10,10,0,0">
                    <CheckBox Margin="0,4" Height="22" Content="エンコード後シャットダウンの選択肢を有効化"
                              IsChecked="{Binding Model.Setting.EnableShutdownAction, Mode=TwoWay}"
                              ToolTip="誤操作を防ぐためデフォルトではシャットダウンを選択できないようになっています。">
                        <CheckBox.Style>
                            <Style TargetType="CheckBox" BasedOn="{StaticResource BaseCheckBoxStyle}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Model.Setting.IsServerLinux}" Value="True">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </CheckBox.Style>
                    </CheckBox>
                    <CheckBox Margin="0,4" Height="22" Content="指定プロセス実行中にスリープ・休止・シャットダウンを行わない"
                              IsChecked="{Binding Model.Setting.noActionExe, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                              ToolTip="指定の名前のプロセスがあった場合に、&#xA;エンコード後にスリープ等を行わないようにします。&#xA;録画等、PCをオンにしておく必要がある場合に&#xA;誤ってオフにしてしまうのを防止します。">
                        <CheckBox.Style>
                            <Style TargetType="CheckBox" BasedOn="{StaticResource BaseCheckBoxStyle}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Model.Setting.IsServerLinux}" Value="True">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </CheckBox.Style>
                    </CheckBox>
                    <DockPanel>
                        <DockPanel.Style>
                            <Style TargetType="DockPanel">
                                <Setter Property="Visibility" Value="Visible"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Model.Setting.noActionExe}" Value="False">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Model.Setting.IsServerLinux}" Value="True">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </DockPanel.Style>
                        <StackPanel>
                            <DockPanel Margin="2">
                                <TextBlock VerticalAlignment="Top" Text="対象プロセスの実行ファイル名"/>
                            </DockPanel>
                            <DockPanel Margin="2">
                                <TextBox HorizontalAlignment="Left" Width="160" Margin="10,0,0,0" Text="{Binding Model.Setting.noFinishExeName, Mode=TwoWay}"
                                         ToolTip="プロセスのファイル名を記入し、追加ボタンをクリックしてください。"/>
                                <Button Width="40" Margin="5,0,5,0" HorizontalAlignment="Right" Content="追加"
                                            Command="{Binding AddNoActionExeCommand}"
                                            ToolTip="上部ボックスのプロセス名をリストに追加します。"/>
                            </DockPanel>
                            <DockPanel Margin="2">
                                <StackPanel DockPanel.Dock="Right" Margin="0">
                                    <Button Width="40" Margin="5,0,5,0" HorizontalAlignment="Right" Content="削除"
                                            Command="{Binding DeleteNoActionExeCommand}"
                                            IsEnabled="{Binding Model.Setting.DeleteNoActionExeEnabled}"
                                            ToolTip="右リストで選択したプロセス名を削除します。"/>
                                </StackPanel>
                                <StackPanel DockPanel.Dock="Right" Margin="0">
                                </StackPanel>
                            </DockPanel>
                        </StackPanel>
                        <StackPanel Margin="10,0,10,0">
                            <ListBox Width="160" Height="80" Margin="0,0,0,0" HorizontalAlignment="Left"
                                     ItemsSource="{Binding Model.Setting.NoActionExeList}"
                                     SelectedIndex="{Binding Model.Setting.noActionExeIndex, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                     ToolTip="このリスト中の実行ファイル名のプロセスが存在する場合、スリープ等を行いません(前方一致)。&#xA;なお、大文字・小文字は区別しません。"/>
                        </StackPanel>
                    </DockPanel>
                    <CheckBox Margin="0,4" Height="22" Content="キューの処理終了後バッチファイルを実行する"
                              IsChecked="{Binding Model.Setting.ExecuteBatchAfterQueue, Mode=TwoWay}"
                              ToolTip="全てのキューの処理が終了した後に指定したバッチファイルを実行します。">
                    </CheckBox>
                    <DockPanel>
                        <DockPanel.Style>
                            <Style TargetType="DockPanel">
                                <Setter Property="Visibility" Value="Visible"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Model.Setting.ExecuteBatchAfterQueue}" Value="False">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </DockPanel.Style>
                        <DockPanel Margin="2">
                            <TextBlock VerticalAlignment="Center" Text="バッチファイルのパス" Width="120"/>
                            <ComboBox Height="22" Width="300" Margin="10,0,0,0"
                                      ItemsSource="{Binding Model.QueueFinishBatFiles}"
                                      SelectedItem="{Binding Model.Setting.BatchFileAfterQueuePath, Mode=TwoWay}"
                                      ToolTip="サーバーのbatフォルダの 'キュー完了後_xxx' から選択します。"/>
                        </DockPanel>
                    </DockPanel>
                </StackPanel>


                <StackPanel Grid.Row="9" Grid.Column="0">
                    <TextBlock HorizontalAlignment="Right" Height="22" VerticalAlignment="Center" Margin="0,4" Text="エンコード最大並列数"/>
                </StackPanel>
                <StackPanel Grid.Row="10" Grid.Column="0">
                    <TextBlock HorizontalAlignment="Right" Height="22" VerticalAlignment="Center" Margin="0,4" Text="プロセス優先度"/>
                </StackPanel>
                <StackPanel Grid.Row="11" Grid.Column="0">
                    <TextBlock HorizontalAlignment="Right" Height="22" VerticalAlignment="Center" Margin="0,4" Text="CPUアフィニティ"/>
                </StackPanel>
                <StackPanel Grid.Row="12" Grid.Column="0">
                    <TextBlock HorizontalAlignment="Right" Height="22" VerticalAlignment="Center" Margin="0,4" Text=""/>
                </StackPanel>
                <StackPanel Grid.Row="13" Grid.Column="0">
                    <TextBlock HorizontalAlignment="Right" Height="22" VerticalAlignment="Top" Margin="0,4,0,0" Text="スケジューリング"/>
                </StackPanel>

                <StackPanel Grid.Row="9" Grid.Column="1">
                    <DockPanel Margin="10,0,0,0">
                        <TextBlock DockPanel.Dock="Right" TextWrapping="Wrap" Width="30" Margin="4" VerticalAlignment="Center" HorizontalAlignment="Center" Text="{Binding Model.Setting.NumParallel}"/>
                        <Slider Margin="3,4" Height="26" SmallChange="1" Maximum="22" Minimum="0" Value="{Binding Model.Setting.NumParallelIndex, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ToolTip="同時に実行するインスタンス数です。エンコーダのスレッド数ではありません。&#xA;リソーススケジューリングで中断しているインスタンスも並列数にカウントされるので&#xA;リソーススケジューリングを使う場合は多めに設定してください。"/>
                    </DockPanel>
                </StackPanel>
                <StackPanel Grid.Row="10" Grid.Column="1">

                    <ComboBox IsReadOnly="True" Width="150" HorizontalAlignment="Left" Margin="10,3,0,0" Height="22" ItemsSource="{Binding Model.ProcessPriorityList}" SelectedIndex="{Binding Model.Setting.ProcessPriority, Mode=TwoWay}" ToolTip="「通常以下」または「低」推奨です"/>

                </StackPanel>
                <StackPanel Grid.Row="11" Grid.Column="1">
                    <DockPanel Margin="10,0,0,0">
                        <DockPanel.Resources>
                            <ControlTemplate x:Key="ShowPartitions">
                                <DockPanel>
                                    <TextBlock Text="ごと→分割数"/>
                                    <TextBlock Text="{Binding Model.CurrentClusters, Mode=OneWay}"/>
                                </DockPanel>
                            </ControlTemplate>
                            <ControlTemplate x:Key="ParitionsDisabled">
                                <Border />
                            </ControlTemplate>
                        </DockPanel.Resources>
                        <ComboBox IsReadOnly="True" Width="120" Height="22" ItemsSource="{Binding Model.AffinityList}" SelectedIndex="{Binding Model.Setting.AffinitySetting, Mode=TwoWay}" ToolTip="コア数の多いCPUではアフィニティを設定したほうが性能が良くなる場合があります。&#xA;L3キャッシュごとに割り当てれば、だいだいベストな性能が出ます。&#xA;GroupはWindowsのプロセッサーグループです。"/>
                        <ContentControl Margin="5,0,0,0" VerticalAlignment="Center">
                            <ContentControl.Style>
                                <Style TargetType="ContentControl">
                                    <Setter Property="Template" Value="{StaticResource ShowPartitions}"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Model.Setting.AffinitySetting}" Value="0">
                                            <Setter Property="Template" Value="{StaticResource ParitionsDisabled}"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ContentControl.Style>
                        </ContentControl>
                    </DockPanel>
                </StackPanel>
                <StackPanel Grid.Row="12" Grid.Column="1">

                    <CheckBox  Height="22" Margin="10,5,0,0"  Content="リソーススケジューリングを有効にする" IsChecked="{Binding Model.Setting.SchedulingEnabled, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ToolTip="エンコードフェーズごとにCPU,HDD,GPUの各資源の使用量を考慮したスケジューリングを行います。&#xA;プロファイル設定で使用リソースを設定する必要があります。" />

                </StackPanel>
                <StackPanel Grid.Row="13" Grid.Column="1">
                    <DockPanel   Margin="12,0,0,0">
                        <DockPanel DockPanel.Dock="Top" IsEnabled="{Binding Model.Setting.SchedulingEnabled}">
                            <TextBlock Text="GPU数:" VerticalAlignment="Center"/>
                            <TextBlock Text="{Binding Model.Setting.NumGPU, Mode=OneWay}" VerticalAlignment="Center" Width="20" TextAlignment="Center"/>
                            <Slider Margin="3,4" Height="26" SmallChange="1" Maximum="16" Minimum="1" Value="{Binding Model.Setting.NumGPU, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                        </DockPanel>
                        <ItemsControl ItemsSource="{Binding Model.Setting.GPUResources}" IsEnabled="{Binding Model.Setting.SchedulingEnabled}">
                            <ItemsControl.Template>
                                <ControlTemplate>
                                    <ItemsPresenter />
                                </ControlTemplate>
                            </ItemsControl.Template>
                            <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <WrapPanel Orientation="Horizontal"/>
                                </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>
                            <ItemsControl.ItemTemplate>
                                <DataTemplate DataType="{x:Type m:DisplayGPUResource}">
                                    <DockPanel Margin="2">
                                        <TextBlock Width="40" VerticalAlignment="Center" TextAlignment="Center">
                                            GPU<Run Text="{Binding DisplayIndex, Mode=OneWay}"/>
                                        </TextBlock>
                                        <TextBox Text="{Binding Max, Mode=TwoWay}" Width="50"/>
                                    </DockPanel>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                    </DockPanel>
                </StackPanel>


                <TextBlock Grid.Row="14" Grid.Column="0" Text="稼働時間設定" HorizontalAlignment="Right" VerticalAlignment="Center"/>
                <StackPanel Grid.Row="14" Grid.Column="1" Margin="10,10,0,0">
                    <CheckBox  Margin="0,4" Height="16"  Content="稼働時間設定を有効にする"
                               IsChecked="{Binding Model.Setting.EnableRunHours, Mode=TwoWay}"/>
                    <DockPanel>
                        <TextBlock VerticalAlignment="Center" Text="停止中は"/>
                        <ComboBox Width="270" IsEnabled="{Binding Model.Setting.EnableRunHours}"
                                  ItemsSource="{Binding Model.Setting.RunHoursSuspendEncodersList}"
                                  SelectedIndex="{Binding Model.Setting.RunHoursSuspendEncodersIndex, Mode=TwoWay}" />
                        <TextBlock VerticalAlignment="Center" Text="を停止する"/>
                    </DockPanel>
                    <DockPanel HorizontalAlignment="Left" Margin="0,5,0,0">
                        <TextBlock DockPanel.Dock="Top" HorizontalAlignment="Center" FontWeight="Bold" Text="稼働する時間帯"/>
                        <ItemsControl ItemsSource="{Binding Model.Setting.RunHours}"
                                      IsEnabled="{Binding Model.Setting.EnableRunHours}" Height="192">
                            <ItemsControl.Template>
                                <ControlTemplate>
                                    <ItemsPresenter />
                                </ControlTemplate>
                            </ItemsControl.Template>
                            <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <WrapPanel Orientation="Vertical"/>
                                </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>
                            <ItemsControl.ItemTemplate>
                                <DataTemplate DataType="{x:Type m:DisplayRunHour}">
                                    <CheckBox Margin="0,0" Height="16"
                                              Content="{Binding HourText}"
                                              IsChecked="{Binding Enabled, Mode=TwoWay}"/>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                    </DockPanel>
                </StackPanel>
                <!-- Setting console font -->
                <TextBlock Grid.Row="15" Grid.Column="0" Text="コンソールフォント" HorizontalAlignment="Right" VerticalAlignment="Center"/>
                <DockPanel Grid.Row="15" Grid.Column="1" Margin="10,0,0,0">
                    <StackPanel DockPanel.Dock="Right">
                        <Button Height="16" Content="クリア" Margin="4" Command="{Binding ClearFontFamilyCommand}"/>
                    </StackPanel>
                    <StackPanel>
                        <ComboBox ItemsSource="{Binding Source={x:Static Fonts.SystemFontFamilies}}" SelectedValue="{Binding Model.Setting.ConsoleFont, Mode=TwoWay}"/>
                    </StackPanel>
                </DockPanel>
            </Grid>
        </ScrollViewer>
    </DockPanel>
</UserControl>
