name: Build Linux Packages

on:
  push:
    branches:
      - master
      - linux
    tags:
      - '*'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - dockerimg: ubuntu2404
            osver: Ubuntu24.04
            pkgtype: deb
            arch: x86_64
          - dockerimg: ubuntu2204
            osver: Ubuntu22.04
            pkgtype: deb
            arch: x86_64

    env:
      DOCKER_FILE:  docker/docker_${{ matrix.dockerimg }}
      DOCKER_IMAGE: ${{ matrix.dockerimg }}
      PKG_TYPE: ${{ matrix.pkgtype }}

    name: Upload Release Asset
    runs-on: ubuntu-latest
    steps:
      - name: Prepare
        id: prep
        run: |
          REPOSITORY=$(echo ${{ github.repository }} | sed -e "s#.*/##")
          VERSION=$(echo ${{ github.ref }} | sed -e "s#refs/tags/##g")
          IMAGE="build_amatsukaze_"${{ env.DOCKER_IMAGE }}
          TAG=$(echo $GITHUB_SHA | head -c7)
          NPROC=$(grep 'processor' /proc/cpuinfo | wc -l)
          OUTPUT_DIR=`pwd`/output
          LOCAL_USER_ID=$(id -u)
          LOCAL_GROUP_ID=$(id -g)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tagged_image=${IMAGE}:${TAG}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "nproc=${NPROC}" >> $GITHUB_OUTPUT
          echo "output_dir=${OUTPUT_DIR}" >> $GITHUB_OUTPUT
          echo "local_user_id=${LOCAL_USER_ID}" >> $GITHUB_OUTPUT
          echo "local_group_id=${LOCAL_GROUP_ID}" >> $GITHUB_OUTPUT

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0
      - name: Set version name
        id: rev
        run: |
          cd ${{ github.workspace }}
          REVCOUNT=`git rev-list --count HEAD`
          echo "rev_count=${REVCOUNT}" >> $GITHUB_OUTPUT
          if [[ "${{ github.ref }}" =~ "refs/tags/" ]]; then
            VERSION=$(echo ${{ github.ref }} | sed -e "s#refs/tags/##g")
          else
            VERSION=r${REVCOUNT}
          fi
          echo "version_name=${VERSION}" >> $GITHUB_OUTPUT

      - name: Create Output Dir
        run: |
          mkdir -p ${{ steps.prep.outputs.output_dir }}

      - name: Set up QEMU
        if: matrix.arch != 'x86_64'
        uses: docker/setup-qemu-action@v3

      - name: Build Exec
        id: build_exec
        run: |
          docker build --build-arg LOCAL_USER_ID=${{ steps.prep.outputs.local_user_id }} --build-arg LOCAL_GROUP_ID=${{ steps.prep.outputs.local_group_id }} --tag ${{ steps.prep.outputs.tagged_image }} --platform linux/${{ matrix.arch }} --file ${{ env.DOCKER_FILE }} ./
          docker run -dit --rm -v ${{ steps.prep.outputs.output_dir }}:/output -u "$(id -u):$(id -g)" --name build_pkg ${{ steps.prep.outputs.tagged_image }}
          docker exec build_pkg ./scripts/build.sh buildAmatsukaze/Amatsukaze
          docker exec build_pkg sh -c "cd buildAmatsukaze/Amatsukaze; tar -Jcvf /output/Amatsukaze_${{ matrix.osver }}_${{ steps.rev.outputs.version_name }}.tar.xz ."
          echo "pkg_name=Amatsukaze_${{ matrix.osver }}_${{ steps.rev.outputs.version_name }}.tar.xz" >> $GITHUB_OUTPUT

      - name: Calc hash
        id: calc_hash
        run: |
          7z h -scrc* ${{ steps.build_exec.outputs.pkg_name }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: Amatsukaze_${{ matrix.osver }}_${{ matrix.pkgtype }}
          path: ${{ steps.build_exec.outputs.pkg_name }}

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            ${{ steps.build_exec.outputs.pkg_name }}